{"version":3,"file":"static/js/210.93d67e84.chunk.js","mappings":"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","sources":["Components/AyahRecitation.js","Helper/arabic-normalizer.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// const AyahRecitation = () => {\r\n//   const audioRef = useRef(null);\r\n\r\n//   // The Ayah (verse) text to be recited\r\n//   const ayahText = \"الحمد لله رب العالمين\";\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Use state to track the index of the currently highlighted word\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     // Calculate word timings dynamically based on audio duration and number of words\r\n//     const wordTimings = [];\r\n//     audio.onloadedmetadata = () => {\r\n//       const totalDuration = audio.duration; // The total duration of the audio\r\n//       const durationPerWord = totalDuration / words.length;\r\n\r\n//       // Generate the word timings\r\n//       for (let i = 0; i < words.length; i++) {\r\n//         wordTimings.push(i * durationPerWord);\r\n//       }\r\n\r\n//       // Update the current word based on the audio time\r\n//       const updateWordHighlight = () => {\r\n//         const currentTime = audio.currentTime;\r\n\r\n//         // Find the index of the word that should be highlighted based on the current time\r\n//         for (let i = 0; i < wordTimings.length; i++) {\r\n//           if (currentTime >= wordTimings[i] && (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])) {\r\n//             setCurrentWordIndex(i);\r\n//             break;\r\n//           }\r\n//         }\r\n//       };\r\n\r\n//       // Attach timeupdate event listener to update the current word\r\n//       audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//       return () => {\r\n//         audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//       };\r\n//     };\r\n//   }, [words.length]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     audioRef.current.play();\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     audioRef.current.pause();\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} src=\"https://everyayah.com/data/Husary_128kbps_Mujawwad/001002.mp3\" />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n//export default AyahRecitation;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n// const AyahRecitation = () => {\r\n//   const audioRef = useRef(null);\r\n//   const [audioContext, setAudioContext] = useState(null);\r\n//   const [silenceTimes, setSilenceTimes] = useState([]);\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n\r\n//   // The Ayah (verse) text to be recited\r\n//   //const ayahText = \"In the name of Allah, the Most Gracious, the Most Merciful\";\r\n//   const ayahText = \"الحمد لله رب العالمين\";\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     // Create AudioContext only once\r\n//     const context = new (window.AudioContext || window.webkitAudioContext)();\r\n//     setAudioContext(context);\r\n\r\n//     // Ensure to set up the source node and analyser node only once\r\n//     const audioSource = context.createMediaElementSource(audio);\r\n//     const analyser = context.createAnalyser();\r\n\r\n//     // Connect the source to the analyser and the analyser to the context destination\r\n//     audioSource.connect(analyser);\r\n//     analyser.connect(context.destination);\r\n\r\n//     // Function to detect silence during audio playback\r\n//     const detectSilence = () => {\r\n//       const bufferLength = analyser.frequencyBinCount;\r\n//       const dataArray = new Uint8Array(bufferLength);\r\n\r\n//       analyser.getByteFrequencyData(dataArray);\r\n\r\n//       let silentDuration = 0;\r\n//       let startSilence = 0;\r\n//       const silenceThreshold = 5; // Adjust this for how sensitive you want silence to be\r\n\r\n//       for (let i = 0; i < bufferLength; i++) {\r\n//         if (dataArray[i] < silenceThreshold) {\r\n//           if (startSilence === 0) {\r\n//             startSilence = audio.currentTime;\r\n//           }\r\n//         } else {\r\n//           if (startSilence !== 0) {\r\n//             silentDuration += audio.currentTime - startSilence;\r\n//             startSilence = 0;\r\n//           }\r\n//         }\r\n//       }\r\n\r\n//       // Set the silent times (this is a simple approach and can be enhanced)\r\n//       setSilenceTimes((prevSilences) => [...prevSilences, silentDuration]);\r\n//     };\r\n\r\n//     // Call detectSilence every second to get the current silence time\r\n//     const silenceInterval = setInterval(detectSilence, 1000);\r\n\r\n//     // Clean up the interval on component unmount\r\n//     return () => {\r\n//       clearInterval(silenceInterval);\r\n//     };\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     // Calculate word timings dynamically based on word length and total length\r\n//     const wordTimings = [];\r\n//     audio.onloadedmetadata = () => {\r\n//       const totalDuration = audio.duration; // The total duration of the audio\r\n//       let elapsedTime = 0;\r\n\r\n//       // Calculate the time for each word based on its proportion of the total length\r\n//       for (let i = 0; i < words.length; i++) {\r\n//         const wordLength = words[i].length;\r\n//         const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//         // Adjust time by excluding silence times\r\n//         const adjustedWordDuration = wordDuration - silenceTimes.reduce((acc, time) => acc + time, 0);\r\n//         elapsedTime += adjustedWordDuration;\r\n\r\n//         wordTimings.push(elapsedTime);\r\n//       }\r\n\r\n//       // Update the current word based on the audio time\r\n//       const updateWordHighlight = () => {\r\n//         const currentTime = audio.currentTime;\r\n\r\n//         for (let i = 0; i < wordTimings.length; i++) {\r\n//           if (\r\n//             currentTime >= wordTimings[i] &&\r\n//             (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//           ) {\r\n//             setCurrentWordIndex(i);\r\n//             break;\r\n//           }\r\n//         }\r\n//       };\r\n\r\n//       // Attach timeupdate event listener to update the current word\r\n//       audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//       return () => {\r\n//         audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//       };\r\n//     };\r\n//   }, [silenceTimes]);\r\n\r\n//   const handlePlay = () => {\r\n//     audioRef.current.play();\r\n//   };\r\n\r\n//   const handlePause = () => {\r\n//     audioRef.current.pause();\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} src=\"https://everyayah.com/data/Husary_128kbps_Mujawwad/001002.mp3\" />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import normalizeArabic  from \"../Helper/arabic-normalizer\";\r\n// const AyahRecitation = ({ayahText,audioUrl}) => {\r\n//   const audioRef = useRef(null);\r\n//   //const ayahText = \"ٱلۡحَمۡدُ لِلَّهِ رَبِّ ٱلۡعَٰلَمِينَ\"\r\n//   //const audioUrl=\"https://everyayah.com/data/Husary_128kbps_Mujawwad/001002.mp3\"\r\n//   //\"الحمد لله رب العالمين\";\r\n//   // The Ayah (verse) text to be recited\r\n//   //const ayahText = \"In the name of Allah, the Most Gracious, the Most Merciful\";\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   // Use state to track the index of the currently highlighted word\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     // Calculate word timings dynamically based on word length and total length\r\n//     const wordTimings = [];\r\n//     audio.onloadedmetadata = () => {\r\n//       const totalDuration = audio.duration; // The total duration of the audio\r\n//       let elapsedTime = 0;\r\n\r\n//       // Calculate the time for each word based on its proportion of the total length\r\n//       for (let i = 0; i < words.length; i++) {\r\n//         // Calculate word duration based on its length proportion\r\n//         const wordLength = words[i].length;\r\n//         const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//         elapsedTime += wordDuration; // Update elapsed time for next word\r\n//         wordTimings.push(elapsedTime);\r\n//       }\r\n\r\n//       // Update the current word based on the audio time\r\n//       const updateWordHighlight = () => {\r\n//         const currentTime = audio.currentTime;\r\n\r\n//         // Find the index of the word that should be highlighted based on the current time\r\n//         for (let i = 0; i < wordTimings.length; i++) {\r\n//           if (\r\n//             currentTime >= wordTimings[i] &&\r\n//             (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//           ) {\r\n//             setCurrentWordIndex(i);\r\n//             break;\r\n//           }\r\n//         }\r\n//       };\r\n\r\n//       // Attach timeupdate event listener to update the current word\r\n//       audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//       return () => {\r\n//         audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//       };\r\n//     };\r\n//   }, [words.length, totalLength]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     audioRef.current.play();\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     audioRef.current.pause();\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} src={audioUrl} />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import normalizeArabic from \"../Helper/arabic-normalizer\";\r\n\r\n// const AyahRecitation = ({ ayahText, audioUrl }) => {\r\n//   const audioRef = useRef(null);\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n//   const [isAudioLoaded, setIsAudioLoaded] = useState(false); // Track if audio is loaded\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     if (isAudioLoaded) {\r\n//       const wordTimings = [];\r\n//       audio.onloadedmetadata = () => {\r\n//         const totalDuration = audio.duration; // The total duration of the audio\r\n//         let elapsedTime = 0;\r\n\r\n//         // Calculate the time for each word based on its proportion of the total length\r\n//         for (let i = 0; i < words.length; i++) {\r\n//           const wordLength = words[i].length;\r\n//           const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//           elapsedTime += wordDuration;\r\n//           wordTimings.push(elapsedTime);\r\n//         }\r\n\r\n//         // Update the current word based on the audio time\r\n//         const updateWordHighlight = () => {\r\n//           const currentTime = audio.currentTime;\r\n\r\n//           for (let i = 0; i < wordTimings.length; i++) {\r\n//             if (\r\n//               currentTime >= wordTimings[i] &&\r\n//               (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//             ) {\r\n//               setCurrentWordIndex(i);\r\n//               break;\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         // Attach timeupdate event listener to update the current word\r\n//         audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//         return () => {\r\n//           audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//         };\r\n//       };\r\n//     }\r\n//   }, [words.length, totalLength, isAudioLoaded]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.src = audioUrl; // Set the audio source when play is clicked\r\n//     setIsAudioLoaded(true); // Mark the audio as loaded\r\n//     audio.play(); // Play the audio\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.pause(); // Pause the audio\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import normalizeArabic from \"../Helper/arabic-normalizer\";\r\n\r\n// const AyahRecitation = ({ ayahText, audioUrl }) => {\r\n//   const audioRef = useRef(null);\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n//   const [isAudioLoaded, setIsAudioLoaded] = useState(false); // Track if audio is loaded\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     if (isAudioLoaded) {\r\n//       const wordTimings = [];\r\n//       audio.onloadedmetadata = () => {\r\n//         const totalDuration = audio.duration; // The total duration of the audio\r\n//         let elapsedTime = 0;\r\n\r\n//         // Calculate the time for each word based on its proportion of the total length\r\n//         for (let i = 0; i < words.length; i++) {\r\n//           const wordLength = words[i].length;\r\n//           const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//           elapsedTime += wordDuration;\r\n//           wordTimings.push(elapsedTime);\r\n//         }\r\n\r\n//         // Update the current word based on the audio time\r\n//         const updateWordHighlight = () => {\r\n//           const currentTime = audio.currentTime;\r\n\r\n//           for (let i = 0; i < wordTimings.length; i++) {\r\n//             if (\r\n//               currentTime >= wordTimings[i] &&\r\n//               (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//             ) {\r\n//               setCurrentWordIndex(i);\r\n//               break;\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         // Attach timeupdate event listener to update the current word\r\n//         audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//         return () => {\r\n//           audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//         };\r\n//       };\r\n//     }\r\n//   }, [words.length, totalLength, isAudioLoaded]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.src = audioUrl; // Set the audio source when play is clicked\r\n//     setIsAudioLoaded(true); // Mark the audio as loaded\r\n//     audio.currentTime = 0; // Start from the beginning\r\n//     audio.play(); // Play the audio\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.pause(); // Pause the audio\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import normalizeArabic from \"../Helper/arabic-normalizer\";\r\n\r\n// const AyahRecitation = ({ ayahText, audioUrl }) => {\r\n//   const audioRef = useRef(null);\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n//   const [isAudioLoaded, setIsAudioLoaded] = useState(false); // Track if audio is loaded\r\n//   const [audioProgress, setAudioProgress] = useState(0); // Track audio progress\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     if (isAudioLoaded) {\r\n//       const wordTimings = [];\r\n//       audio.onloadedmetadata = () => {\r\n//         const totalDuration = audio.duration; // The total duration of the audio\r\n//         let elapsedTime = 0;\r\n\r\n//         // Calculate the time for each word based on its proportion of the total length\r\n//         for (let i = 0; i < words.length; i++) {\r\n//           const wordLength = words[i].length;\r\n//           const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//           elapsedTime += wordDuration;\r\n//           wordTimings.push(elapsedTime);\r\n//         }\r\n\r\n//         // Update the current word based on the audio time\r\n//         const updateWordHighlight = () => {\r\n//           const currentTime = audio.currentTime;\r\n//           setAudioProgress((currentTime / audio.duration) * 100); // Update progress bar\r\n\r\n//           for (let i = 0; i < wordTimings.length; i++) {\r\n//             if (\r\n//               currentTime >= wordTimings[i] &&\r\n//               (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//             ) {\r\n//               setCurrentWordIndex(i);\r\n//               break;\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         // Attach timeupdate event listener to update the current word\r\n//         audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//         return () => {\r\n//           audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//         };\r\n//       };\r\n//     }\r\n//   }, [words.length, totalLength, isAudioLoaded]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.src = audioUrl; // Set the audio source when play is clicked\r\n//     setIsAudioLoaded(true); // Mark the audio as loaded\r\n//     audio.currentTime = 0; // Start from the beginning\r\n//     audio.play(); // Play the audio\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.pause(); // Pause the audio\r\n//   };\r\n\r\n//   // Handle progress bar change (seek functionality)\r\n//   const handleProgressBarChange = (event) => {\r\n//     const audio = audioRef.current;\r\n//     const newTime = (event.target.value / 100) * audio.duration; // Calculate new time based on the progress bar\r\n//     audio.currentTime = newTime;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Progress Bar */}\r\n//         <div className=\"mt-3\">\r\n//           <input\r\n//             type=\"range\"\r\n//             className=\"form-range\"\r\n//             value={audioProgress}\r\n//             onChange={handleProgressBarChange}\r\n//             min=\"0\"\r\n//             max=\"100\"\r\n//           />\r\n//           <div>Progress: {Math.round(audioProgress)}%</div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import normalizeArabic from \"../Helper/arabic-normalizer\";\r\n\r\n// const AyahRecitation = ({ ayahText, audioUrl }) => {\r\n//   const audioRef = useRef(null);\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n//   const [isAudioLoaded, setIsAudioLoaded] = useState(false); // Track if audio is loaded\r\n//   const [audioProgress, setAudioProgress] = useState(0); // Track audio progress\r\n//   const [currentTime, setCurrentTime] = useState(0); // Track current time of the audio\r\n//   const [duration, setDuration] = useState(0); // Track the total duration of the audio\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     if (isAudioLoaded) {\r\n//       const wordTimings = [];\r\n//       audio.onloadedmetadata = () => {\r\n//         const totalDuration = audio.duration; // The total duration of the audio\r\n//         setDuration(totalDuration); // Set the total duration\r\n//         let elapsedTime = 0;\r\n\r\n//         // Calculate the time for each word based on its proportion of the total length\r\n//         for (let i = 0; i < words.length; i++) {\r\n//           const wordLength = words[i].length;\r\n//           const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//           elapsedTime += wordDuration;\r\n//           wordTimings.push(elapsedTime);\r\n//         }\r\n\r\n//         // Update the current word based on the audio time\r\n//         const updateWordHighlight = () => {\r\n//           const currentTime = audio.currentTime;\r\n//           setAudioProgress((currentTime / audio.duration) * 100); // Update progress bar\r\n\r\n//           // Update current time state\r\n//           setCurrentTime(currentTime);\r\n\r\n//           for (let i = 0; i < wordTimings.length; i++) {\r\n//             if (\r\n//               currentTime >= wordTimings[i] &&\r\n//               (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//             ) {\r\n//               setCurrentWordIndex(i);\r\n//               break;\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         // Attach timeupdate event listener to update the current word and progress bar\r\n//         audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//         return () => {\r\n//           audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//         };\r\n//       };\r\n//     }\r\n//   }, [words.length, totalLength, isAudioLoaded]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.src = audioUrl; // Set the audio source when play is clicked\r\n//     setIsAudioLoaded(true); // Mark the audio as loaded\r\n//     audio.currentTime = 0; // Start from the beginning\r\n//     audio.play(); // Play the audio\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.pause(); // Pause the audio\r\n//   };\r\n\r\n//   // Handle progress bar change (seek functionality)\r\n//   const handleProgressBarChange = (event) => {\r\n//     const audio = audioRef.current;\r\n//     const newTime = (event.target.value / 100) * audio.duration; // Calculate new time based on the progress bar\r\n//     audio.currentTime = newTime;\r\n//   };\r\n\r\n//   // Format time in mm:ss format\r\n//   const formatTime = (time) => {\r\n//     const minutes = Math.floor(time / 60);\r\n//     const seconds = Math.floor(time % 60);\r\n//     return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Progress Bar with time */}\r\n//         <div className=\"mt-3\">\r\n//           <input\r\n//             type=\"range\"\r\n//             className=\"form-range\"\r\n//             value={(currentTime / duration) * 100}\r\n//             onChange={handleProgressBarChange}\r\n//             min=\"0\"\r\n//             max=\"100\"\r\n//           />\r\n//           <div className=\"d-flex justify-content-between\">\r\n//             <span>{formatTime(currentTime)}</span>\r\n//             <span>{formatTime(duration)}</span>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import normalizeArabic from \"../Helper/arabic-normalizer\";\r\n\r\n// const AyahRecitation = ({ ayahText, audioUrl }) => {\r\n//   const audioRef = useRef(null);\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n//   const [isAudioLoaded, setIsAudioLoaded] = useState(false); // Track if audio is loaded\r\n//   const [audioProgress, setAudioProgress] = useState(0); // Track audio progress\r\n//   const [currentTime, setCurrentTime] = useState(0); // Track current time of the audio\r\n//   const [duration, setDuration] = useState(0); // Track the total duration of the audio\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     if (isAudioLoaded) {\r\n//       const wordTimings = [];\r\n//       audio.onloadedmetadata = () => {\r\n//         const totalDuration = audio.duration; // The total duration of the audio\r\n//         setDuration(totalDuration); // Set the total duration\r\n//         let elapsedTime = 0;\r\n\r\n//         // Calculate the time for each word based on its proportion of the total length\r\n//         for (let i = 0; i < words.length; i++) {\r\n//           const wordLength = words[i].length;\r\n//           const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//           elapsedTime += wordDuration;\r\n//           wordTimings.push(elapsedTime);\r\n//         }\r\n\r\n//         // Update the current word based on the audio time\r\n//         const updateWordHighlight = () => {\r\n//           const currentTime = audio.currentTime;\r\n//           setAudioProgress((currentTime / audio.duration) * 100); // Update progress bar\r\n\r\n//           // Update current time state\r\n//           setCurrentTime(currentTime);\r\n\r\n//           for (let i = 0; i < wordTimings.length; i++) {\r\n//             if (\r\n//               currentTime >= wordTimings[i] &&\r\n//               (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//             ) {\r\n//               setCurrentWordIndex(i);\r\n//               break;\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         // Attach timeupdate event listener to update the current word and progress bar\r\n//         audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//         return () => {\r\n//           audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//         };\r\n//       };\r\n//     }\r\n//   }, [words.length, totalLength, isAudioLoaded]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.src = audioUrl; // Set the audio source when play is clicked\r\n//     setIsAudioLoaded(true); // Mark the audio as loaded\r\n//     audio.currentTime = 0; // Start from the beginning\r\n//     audio.play(); // Play the audio\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.pause(); // Pause the audio\r\n//   };\r\n\r\n//   // Handle progress bar change (seek functionality)\r\n//   const handleProgressBarChange = (event) => {\r\n//     const audio = audioRef.current;\r\n//     const newTime = (event.target.value / 100) * audio.duration; // Calculate new time based on the progress bar\r\n//     audio.currentTime = newTime;\r\n//   };\r\n\r\n//   // Format time in mm:ss format\r\n//   const formatTime = (time) => {\r\n//     const minutes = Math.floor(time / 60);\r\n//     const seconds = Math.floor(time % 60);\r\n//     return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Progress Bar with time */}\r\n//         <div className=\"mt-3\">\r\n//           <input\r\n//             type=\"range\"\r\n//             className=\"form-range\"\r\n//             value={(currentTime / duration) * 100}\r\n//             onChange={handleProgressBarChange}\r\n//             min=\"0\"\r\n//             max=\"100\"\r\n//             disabled={!isAudioLoaded} // Disable progress bar until audio is loaded\r\n//           />\r\n//           <div className=\"d-flex justify-content-between\">\r\n//             <span>{formatTime(currentTime)}</span>\r\n//             <span>{formatTime(duration)}</span>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import normalizeArabic from \"../Helper/arabic-normalizer\";\r\n\r\n// const AyahRecitation = ({ ayahText, audioUrl }) => {\r\n//   const audioRef = useRef(null);\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n//   const [isAudioLoaded, setIsAudioLoaded] = useState(false); // Track if audio is loaded\r\n//   const [audioProgress, setAudioProgress] = useState(0); // Track audio progress\r\n//   const [currentTime, setCurrentTime] = useState(0); // Track current time of the audio\r\n//   const [duration, setDuration] = useState(0); // Track the total duration of the audio\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     if (isAudioLoaded) {\r\n//       const wordTimings = [];\r\n//       audio.onloadedmetadata = () => {\r\n//         const totalDuration = audio.duration; // The total duration of the audio\r\n//         setDuration(totalDuration); // Set the total duration\r\n//         let elapsedTime = 0;\r\n\r\n//         // Calculate the time for each word based on its proportion of the total length\r\n//         for (let i = 0; i < words.length; i++) {\r\n//           const wordLength = words[i].length;\r\n//           const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//           elapsedTime += wordDuration;\r\n//           wordTimings.push(elapsedTime);\r\n//         }\r\n\r\n//         // Update the current word based on the audio time\r\n//         const updateWordHighlight = () => {\r\n//           const currentTime = audio.currentTime;\r\n//           setAudioProgress((currentTime / audio.duration) * 100); // Update progress bar\r\n\r\n//           // Update current time state\r\n//           setCurrentTime(currentTime);\r\n\r\n//           for (let i = 0; i < wordTimings.length; i++) {\r\n//             if (\r\n//               currentTime >= wordTimings[i] &&\r\n//               (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//             ) {\r\n//               setCurrentWordIndex(i);\r\n//               break;\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         // Attach timeupdate event listener to update the current word and progress bar\r\n//         audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//         return () => {\r\n//           audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//         };\r\n//       };\r\n//     }\r\n//   }, [words.length, totalLength, isAudioLoaded]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.src = audioUrl; // Set the audio source when play is clicked\r\n//     setIsAudioLoaded(true); // Mark the audio as loaded\r\n//     audio.currentTime = 0; // Start from the beginning\r\n//     audio.play(); // Play the audio\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.pause(); // Pause the audio\r\n//   };\r\n\r\n//   // Handle progress bar change (seek functionality)\r\n//   const handleProgressBarChange = (event) => {\r\n//     const audio = audioRef.current;\r\n//     const newTime = (event.target.value / 100) * audio.duration; // Calculate new time based on the progress bar\r\n//     audio.currentTime = newTime;\r\n//   };\r\n\r\n//   // Format time in mm:ss format\r\n//   const formatTime = (time) => {\r\n//     const minutes = Math.floor(time / 60);\r\n//     const seconds = Math.floor(time % 60);\r\n//     return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Progress Bar with time */}\r\n//         <div className=\"mt-3\">\r\n//           {/* Container for custom progress bar */}\r\n//           <div className=\"progress-bar-container\" style={{ position: \"relative\", width: \"100%\", height: \"10px\", backgroundColor: \"#e0e0e0\", borderRadius: \"5px\" }}>\r\n//             <div\r\n//               style={{\r\n//                 position: \"absolute\",\r\n//                 top: 0,\r\n//                 left: 0,\r\n//                 width: `${audioProgress}%`, // Adjust width based on progress\r\n//                 height: \"100%\",\r\n//                 backgroundColor: \"#4caf50\", // Color of played portion\r\n//                 borderRadius: \"5px 0 0 5px\",\r\n//               }}\r\n//             />\r\n//             <input\r\n//               type=\"range\"\r\n//               className=\"form-range\"\r\n//               value={(currentTime / duration) * 100}\r\n//               onChange={handleProgressBarChange}\r\n//               min=\"0\"\r\n//               max=\"100\"\r\n//               disabled={!isAudioLoaded} // Disable progress bar until audio is loaded\r\n//               style={{\r\n//                 position: \"absolute\",\r\n//                 top: 0,\r\n//                 left: 0,\r\n//                 width: \"100%\",\r\n//                 backgroundColor: \"transparent\",\r\n//                 cursor: \"pointer\",\r\n//                 appearance: \"none\",\r\n//               }}\r\n//             />\r\n//           </div>\r\n//           <div className=\"d-flex justify-content-between\">\r\n//             <span>{formatTime(currentTime)}</span>\r\n//             <span>{formatTime(duration)}</span>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import normalizeArabic from \"../Helper/arabic-normalizer\";\r\n\r\n// const AyahRecitation = ({ ayahText, audioUrl }) => {\r\n//   const audioRef = useRef(null);\r\n//   const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n//   const [isAudioLoaded, setIsAudioLoaded] = useState(false); // Track if audio is loaded\r\n//   const [audioProgress, setAudioProgress] = useState(0); // Track audio progress\r\n//   const [currentTime, setCurrentTime] = useState(0); // Track current time of the audio\r\n//   const [duration, setDuration] = useState(0); // Track the total duration of the audio\r\n\r\n//   // Break the Ayah into words\r\n//   const words = ayahText.split(\" \");\r\n\r\n//   // Calculate the total length of the Ayah (total number of characters)\r\n//   const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n//   useEffect(() => {\r\n//     const audio = audioRef.current;\r\n\r\n//     if (isAudioLoaded) {\r\n//       const wordTimings = [];\r\n//       audio.onloadedmetadata = () => {\r\n//         const totalDuration = audio.duration; // The total duration of the audio\r\n//         setDuration(totalDuration); // Set the total duration\r\n//         let elapsedTime = 0;\r\n\r\n//         // Calculate the time for each word based on its proportion of the total length\r\n//         for (let i = 0; i < words.length; i++) {\r\n//           const wordLength = words[i].length;\r\n//           const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n//           elapsedTime += wordDuration;\r\n//           wordTimings.push(elapsedTime);\r\n//         }\r\n\r\n//         // Update the current word based on the audio time\r\n//         const updateWordHighlight = () => {\r\n//           const currentTime = audio.currentTime;\r\n//           setAudioProgress((currentTime / audio.duration) * 100); // Update progress bar\r\n\r\n//           // Update current time state\r\n//           setCurrentTime(currentTime);\r\n\r\n//           for (let i = 0; i < wordTimings.length; i++) {\r\n//             if (\r\n//               currentTime >= wordTimings[i] &&\r\n//               (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n//             ) {\r\n//               setCurrentWordIndex(i);\r\n//               break;\r\n//             }\r\n//           }\r\n//         };\r\n\r\n//         // Attach timeupdate event listener to update the current word and progress bar\r\n//         audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n//         return () => {\r\n//           audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n//         };\r\n//       };\r\n//     }\r\n//   }, [words.length, totalLength, isAudioLoaded]);\r\n\r\n//   // Handle audio play\r\n//   const handlePlay = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.src = audioUrl; // Set the audio source when play is clicked\r\n//     setIsAudioLoaded(true); // Mark the audio as loaded\r\n//     audio.currentTime = 0; // Start from the beginning\r\n//     audio.play(); // Play the audio\r\n//   };\r\n\r\n//   // Handle audio pause\r\n//   const handlePause = () => {\r\n//     const audio = audioRef.current;\r\n//     audio.pause(); // Pause the audio\r\n//   };\r\n\r\n//   // Handle progress bar change (seek functionality)\r\n//   const handleProgressBarChange = (event) => {\r\n//     const audio = audioRef.current;\r\n//     const newTime = (event.target.value / 100) * audio.duration; // Calculate new time based on the progress bar\r\n//     audio.currentTime = newTime;\r\n//   };\r\n\r\n//   // Format time in mm:ss format\r\n//   const formatTime = (time) => {\r\n//     const minutes = Math.floor(time / 60);\r\n//     const seconds = Math.floor(time % 60);\r\n//     return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h3>Ayah Recitation</h3>\r\n//       <p>\r\n//         {words.map((word, index) => (\r\n//           <span\r\n//             key={index}\r\n//             style={{\r\n//               fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n//               color: currentWordIndex === index ? \"red\" : \"black\",\r\n//             }}\r\n//           >\r\n//             {word}{\" \"}\r\n//           </span>\r\n//         ))}\r\n//       </p>\r\n\r\n//       <div>\r\n//         <audio ref={audioRef} />\r\n//         <div>\r\n//           <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n//             Play\r\n//           </button>\r\n//           <button className=\"btn btn-secondary\" onClick={handlePause}>\r\n//             Pause\r\n//           </button>\r\n//         </div>\r\n\r\n//         {/* Progress Bar with time */}\r\n//         <div className=\"mt-3\" style={{ position: \"relative\", width: \"100%\" }}>\r\n//           {/* Container for custom progress bar */}\r\n//           <div\r\n//             className=\"progress-bar-container\"\r\n//             style={{\r\n//               position: \"relative\",\r\n//               width: \"100%\",\r\n//               height: \"10px\",\r\n//               backgroundColor: \"#e0e0e0\",\r\n//               borderRadius: \"5px\",\r\n//             }}\r\n//           >\r\n//             <div\r\n//               style={{\r\n//                 position: \"absolute\",\r\n//                 top: 0,\r\n//                 left: 0,\r\n//                 width: `${audioProgress}%`, // Adjust width based on progress\r\n//                 height: \"100%\",\r\n//                 backgroundColor: \"#4caf50\", // Color of played portion\r\n//                 borderRadius: \"5px 0 0 5px\",\r\n//               }}\r\n//             />\r\n//             <input\r\n//               type=\"range\"\r\n//               className=\"form-range\"\r\n//               value={(currentTime / duration) * 100}\r\n//               onChange={handleProgressBarChange}\r\n//               min=\"0\"\r\n//               max=\"100\"\r\n//               disabled={!isAudioLoaded} // Disable progress bar until audio is loaded\r\n//               style={{\r\n//                 position: \"absolute\",\r\n//                 top: 0,\r\n//                 left: 0,\r\n//                 width: \"100%\",\r\n//                 backgroundColor: \"transparent\",\r\n//                 cursor: \"pointer\",\r\n//                 appearance: \"none\",\r\n//                 zIndex: 2, // Ensure it's above the progress fill\r\n//               }}\r\n//             />\r\n//             {/* The pointer styles to make it start from the left */}\r\n//             <style>\r\n//               {`\r\n//                 .form-range::-webkit-slider-thumb {\r\n//                   background-color: #007bff; /* Pointer color */\r\n//                   width: 16px;\r\n//                   height: 16px;\r\n//                   border-radius: 50%;\r\n//                   cursor: pointer;\r\n//                   appearance: none;\r\n//                   z-index: 3;\r\n//                   position: relative;\r\n//                 }\r\n//                 .form-range::-moz-range-thumb {\r\n//                   background-color: #007bff; /* Pointer color */\r\n//                   width: 16px;\r\n//                   height: 16px;\r\n//                   border-radius: 50%;\r\n//                   cursor: pointer;\r\n//                 }\r\n//                 .form-range:disabled::-webkit-slider-thumb {\r\n//                   background-color: transparent; /* Make pointer invisible when disabled */\r\n//                 }\r\n//                 .form-range:disabled::-moz-range-thumb {\r\n//                   background-color: transparent; /* Make pointer invisible when disabled */\r\n//                 }\r\n//               `}\r\n//             </style>\r\n//           </div>\r\n//           <div className=\"d-flex justify-content-between\">\r\n//             <span>{formatTime(currentTime)}</span>\r\n//             <span>{formatTime(duration)}</span>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AyahRecitation;\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport normalizeArabic from \"../Helper/arabic-normalizer\";\r\n\r\nconst AyahRecitation = ({ ayahText, audioUrl }) => {\r\n  const audioRef = useRef(null);\r\n  const [currentWordIndex, setCurrentWordIndex] = useState(null);\r\n  const [isAudioLoaded, setIsAudioLoaded] = useState(false); // Track if audio is loaded\r\n  const [audioProgress, setAudioProgress] = useState(0); // Track audio progress\r\n  const [currentTime, setCurrentTime] = useState(0); // Track current time of the audio\r\n  const [duration, setDuration] = useState(0); // Track the total duration of the audio\r\n  const [isPlaying, setIsPlaying] = useState(false); // Track if audio is playing\r\n\r\n  // Break the Ayah into words\r\n  const words = ayahText.split(\" \");\r\n\r\n  // Calculate the total length of the Ayah (total number of characters)\r\n  const totalLength = ayahText.replace(/\\s+/g, \"\").length;\r\n\r\n  useEffect(() => {\r\n    const audio = audioRef.current;\r\n\r\n    if (isAudioLoaded) {\r\n      const wordTimings = [];\r\n      audio.onloadedmetadata = () => {\r\n        const totalDuration = audio.duration; // The total duration of the audio\r\n        setDuration(totalDuration); // Set the total duration\r\n        let elapsedTime = 0;\r\n\r\n        // Calculate the time for each word based on its proportion of the total length\r\n        for (let i = 0; i < words.length; i++) {\r\n          const wordLength = words[i].length;\r\n          const wordDuration = (wordLength / totalLength) * totalDuration;\r\n\r\n          elapsedTime += wordDuration;\r\n          wordTimings.push(elapsedTime);\r\n        }\r\n\r\n        // Update the current word based on the audio time\r\n        const updateWordHighlight = () => {\r\n          const currentTime = audio.currentTime;\r\n          setAudioProgress((currentTime / audio.duration) * 100); // Update progress bar\r\n\r\n          // Update current time state\r\n          setCurrentTime(currentTime);\r\n\r\n          for (let i = 0; i < wordTimings.length; i++) {\r\n            if (\r\n              currentTime >= wordTimings[i] &&\r\n              (i === wordTimings.length - 1 || currentTime < wordTimings[i + 1])\r\n            ) {\r\n              setCurrentWordIndex(i);\r\n              break;\r\n            }\r\n          }\r\n        };\r\n\r\n        // Attach timeupdate event listener to update the current word and progress bar\r\n        audio.addEventListener(\"timeupdate\", updateWordHighlight);\r\n\r\n        return () => {\r\n          audio.removeEventListener(\"timeupdate\", updateWordHighlight);\r\n        };\r\n      };\r\n    }\r\n  }, [words.length, totalLength, isAudioLoaded]);\r\n\r\n  // Handle audio play\r\n  const handlePlay = () => {\r\n    const audio = audioRef.current;\r\n    audio.src = audioUrl; // Set the audio source when play is clicked\r\n    setIsAudioLoaded(true); // Mark the audio as loaded\r\n    audio.currentTime = 0; // Start from the beginning\r\n    audio.play(); // Play the audio\r\n    setIsPlaying(true); // Update state to indicate that audio is playing\r\n  };\r\n\r\n  // Handle audio pause/resume\r\n  const handlePauseResume = () => {\r\n    const audio = audioRef.current;\r\n    if (isPlaying) {\r\n      audio.pause(); // Pause the audio\r\n      setIsPlaying(false); // Update state to indicate that audio is paused\r\n    } else {\r\n      audio.play(); // Resume the audio\r\n      setIsPlaying(true); // Update state to indicate that audio is playing\r\n    }\r\n  };\r\n\r\n  // Handle progress bar change (seek functionality)\r\n  const handleProgressBarChange = (event) => {\r\n    const audio = audioRef.current;\r\n    const newTime = (event.target.value / 100) * audio.duration; // Calculate new time based on the progress bar\r\n    audio.currentTime = newTime;\r\n  };\r\n\r\n  // Format time in mm:ss format\r\n  const formatTime = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h3>Ayah Recitation</h3>\r\n      <p>\r\n        {words.map((word, index) => (\r\n          <span\r\n            key={index}\r\n            className={`${currentWordIndex === index ? \"fw-bold text-danger\" : \"fw-bold text-success\"\r\n              }`}\r\n          >\r\n            {word}{\" \"}\r\n          </span>\r\n        ))}\r\n      </p>\r\n\r\n      {/* <p>\r\n        {words.map((word, index) => (\r\n          <span\r\n            key={index}\r\n            style={{\r\n              fontWeight: currentWordIndex === index ? \"bold\" : \"normal\",\r\n              color: currentWordIndex === index ? \"red\" : \"black\",\r\n            }}\r\n          >\r\n            {word}{\" \"}\r\n          </span>\r\n        ))}\r\n      </p> */}\r\n\r\n      <div>\r\n        <audio ref={audioRef} />\r\n        <div className=\"d-flex gap-2\">\r\n          <button className=\"btn btn-primary\" onClick={handlePlay}>\r\n            Play\r\n          </button>\r\n          <button className=\"btn btn-secondary\" onClick={handlePauseResume}>\r\n            {isPlaying ? \"Pause\" : \"Resume\"} {/* Change button text based on the state */}\r\n          </button>\r\n        </div>\r\n\r\n        {/* Progress Bar with time */}\r\n        <div className=\"mt-3\" style={{ position: \"relative\", width: \"100%\" }}>\r\n          {/* Container for custom progress bar */}\r\n          <div\r\n            className=\"progress-bar-container\"\r\n            style={{\r\n              position: \"relative\",\r\n              width: \"100%\",\r\n              height: \"10px\",\r\n              backgroundColor: \"#e0e0e0\",\r\n              borderRadius: \"5px\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                position: \"absolute\",\r\n                top: 0,\r\n                left: 0,\r\n                width: `${audioProgress}%`, // Adjust width based on progress\r\n                height: \"100%\",\r\n                backgroundColor: \"#4caf50\", // Color of played portion\r\n                borderRadius: \"5px 0 0 5px\",\r\n                zIndex: 3\r\n              }}\r\n            />\r\n            <input\r\n              type=\"range\"\r\n              className=\"form-range h-100\"\r\n              value={(currentTime / duration) * 100}\r\n              onChange={handleProgressBarChange}\r\n              min=\"0\"\r\n              max=\"100\"\r\n              disabled={!isAudioLoaded} // Disable progress bar until audio is loaded\r\n              style={{\r\n                position: \"absolute\",\r\n                top: 0,\r\n                left: 0,\r\n                width: \"100%\",\r\n                backgroundColor: \"transparent\",\r\n                cursor: \"pointer\",\r\n                appearance: \"none\",\r\n                zIndex: 2, // Ensure it's above the progress fill\r\n              }}\r\n            />\r\n            {/* The pointer styles to make it start from the left */}\r\n            <style>\r\n              {`\r\n                .form-range::-webkit-slider-thumb {\r\n                  background-color: #007bff; /* Pointer color */\r\n                  width: 16px;\r\n                  height: 16px;\r\n                  border-radius: 50%;\r\n                  cursor: pointer;\r\n                  appearance: none;\r\n                  z-index: 4;\r\n                  position: relative;\r\n                }\r\n                .form-range::-moz-range-thumb {\r\n                  background-color: #007bff; /* Pointer color */\r\n                  width: 16px;\r\n                  height: 16px;\r\n                  border-radius: 50%;\r\n                  cursor: pointer;\r\n                }\r\n                .form-range:disabled::-webkit-slider-thumb {\r\n                  background-color: transparent; /* Make pointer invisible when disabled */\r\n                }\r\n                .form-range:disabled::-moz-range-thumb {\r\n                  background-color: transparent; /* Make pointer invisible when disabled */\r\n                }\r\n              `}\r\n            </style>\r\n          </div>\r\n          <div className=\"d-flex mt-3 justify-content-between\">\r\n            <span>{formatTime(currentTime)}</span>\r\n            <span>{formatTime(duration)}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AyahRecitation;\r\n","const normalizer = {\r\n    'ا': 'ا',\r\n    'أ': 'ا',\r\n    'إ': 'ا',\r\n    'آ': 'ا',\r\n    'ٱ': 'ا',\r\n    'ب': 'ب',\r\n    'ت': 'ت',\r\n    'ث': 'ث',\r\n    'ج': 'ج',\r\n    'ح': 'ح',\r\n    'خ': 'خ',\r\n    'د': 'د',\r\n    'ذ': 'ذ',\r\n    'ر': 'ر',\r\n    'ز': 'ز',\r\n    'س': 'س',\r\n    'ش': 'ش',\r\n    'ص': 'ص',\r\n    'ض': 'ض',\r\n    'ط': 'ط',\r\n    'ظ': 'ظ',\r\n    'ع': 'ع',\r\n    'غ': 'غ',\r\n    'ف': 'ف',\r\n    'ق': 'ق',\r\n    'ك': 'ك',\r\n    'ل': 'ل',\r\n    'م': 'م',\r\n    'ن': 'ن',\r\n    'ه': 'ه',\r\n    'ة': 'ة',\r\n    'و': 'و',\r\n    'ؤ': 'ؤ',\r\n    'ي': 'ي',\r\n    'ى': 'ي',\r\n    'ئ': 'ئ',\r\n    'ءِ': 'ء',\r\n    'ً': '',\r\n    'ٌ': '',\r\n    'ٍ': '',\r\n    'َ': '',\r\n    'ُ': '',\r\n    'ِ': '',\r\n    'ّ': '',\r\n    'ْ': '',\r\n    'ٓ': '',\r\n    'ٔ': '',\r\n    'ٕ': '',\r\n    ' ': ' '\r\n}\r\n\r\nfunction normalizeArabic(text) {\r\n    const normalizedText = Array.from(text).map(letter => normalizer[letter]).join(\"\")\r\n\r\n    return normalizedText\r\n}\r\n\r\nexport default normalizeArabic"],"names":["_ref","ayahText","audioUrl","audioRef","useRef","_useState","useState","_useState2","_slicedToArray","currentWordIndex","setCurrentWordIndex","_useState3","_useState4","isAudioLoaded","setIsAudioLoaded","_useState5","_useState6","audioProgress","setAudioProgress","_useState7","_useState8","currentTime","setCurrentTime","_useState9","_useState10","duration","setDuration","_useState11","_useState12","isPlaying","setIsPlaying","words","split","totalLength","replace","length","useEffect","audio","current","wordTimings","onloadedmetadata","totalDuration","elapsedTime","i","push","updateWordHighlight","addEventListener","removeEventListener","formatTime","time","minutes","Math","floor","seconds","concat","_jsxs","className","children","_jsx","map","word","index","ref","onClick","src","play","pause","style","position","width","height","backgroundColor","borderRadius","top","left","zIndex","type","value","onChange","event","newTime","target","min","max","disabled","cursor","appearance","normalizer","text","Array","from","letter","join"],"sourceRoot":""}