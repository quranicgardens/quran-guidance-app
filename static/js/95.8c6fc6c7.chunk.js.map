{"version":3,"file":"static/js/95.8c6fc6c7.chunk.js","mappings":"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","sources":["Components/AudioPlayer.js","Components/FontResizer.js","../node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","Components/ar/SurahViewer.js","Helper/arabic-normalizer.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { FaDownload, FaHeadphones } from \"react-icons/fa\";\r\n\r\nconst AudioPlayer = ({url}) => {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n    const mp3Url = url;\r\n  const handleListen = () => {\r\n    setIsLoaded(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-12 col-md-6 text-center\">\r\n          {/* <h2>Listen to the MP3</h2> */}\r\n\r\n          <div className=\"my-4\">\r\n            <button\r\n              onClick={handleListen}\r\n              className=\"btn btn-primary\"\r\n              disabled={isLoaded}\r\n            >\r\n              <FaHeadphones className=\"me-2\" />\r\n              {isLoaded ? \"Listening...\" : \"Listen\"}\r\n            </button>\r\n          </div>\r\n\r\n          {isLoaded && (\r\n            <div>\r\n              <audio controls className=\"w-100\">\r\n                <source src={mp3Url} type=\"audio/mp3\" />\r\n                Your browser does not support the audio element.\r\n              </audio>\r\n              <div className=\"mt-3\">\r\n                <a\r\n                target=\"_blank\"\r\n                  href={mp3Url}\r\n                  download\r\n                  className=\"btn btn-success\"\r\n                >\r\n                  <FaDownload className=\"me-2\" />\r\n                  Download MP3\r\n                </a>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioPlayer;\r\n","const FontResizer = () => {\r\n\r\n  return (\r\n  <div className=\"my-4 my-4 d-flex gap-3\">\r\n    <button id=\"increase-font\" className=\"btn btn-primary me-2\">تكبير الخط</button>\r\n    <button id=\"decrease-font\" className=\"btn btn-secondary\">تصغير الخط</button>\r\n  </div>);\r\n}\r\n// event is handled in index.html\r\nexport default FontResizer ;","import _typeof from \"./typeof.js\";\nexport default function _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  };\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw new Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import surahs from '../../Data/ar/surah-ayahs';\r\n// import SurahsDetails from '../../Data/SurahsDetails';\r\n// import { getTypeInArabic, removeTashkeel } from '../../Helper/Utils';\r\n// // const surahs = [\r\n// //   { number: 1, name: 'ٱلْفَاتِحَة', type: 'Meccan', totalVerses: 7, ayat: ['بِسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ', 'الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ', 'الرَّحْمَـٰنِ الرَّحِيمِ', 'مَالِكِ يَوْمِ الدِّينِ', 'إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ', 'اهْدِنَا الصِّرَاطَ الْمُسْتَقِيمَ', 'صِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ الْمَغْضُوبِ عَلَيْهِمْ وَلَا الضَّالِّينَ'] },\r\n// //   { number: 2, name: 'ٱلْبَقَرَة', type: 'Medinan', totalVerses: 286, ayat: ['الم', 'ذَٰلِكَ الْكِتَابُ لَا رَيْبَ ۛ فِيهِ هُدًى لِّلْمُتَّقِينَ', 'الَّذِينَ يُؤْمِنُونَ بِالْغَيْبِ وَيُقِيمُونَ الصَّلَاةَ وَمِمَّا رَزَقْنَاهُمْ يُنفِقُونَ', /* add more ayat here */] },\r\n// //   { number: 3, name: 'آلِ عِمْرَان', type: 'Medinan', totalVerses: 200, ayat: ['الم', 'اللَّهُ لَا إِلَٰهَ إِلَّا هُوَ الْحَيُّ الْقَيُّومُ', /* add more ayat here */] },\r\n// //   // Add more surahs here\r\n// // ];\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const surah = surahs[surahNumber];\r\n//     //.find(s => s.number.toString() === surahNumber);\r\n//     setSelectedSurah(surah || null);\r\n//   }, [surahNumber]);\r\n\r\n//   return (\r\n//     <>\r\n//     <style>{`\r\n// body {\r\n//   direction: rtl;\r\n//   text-align: right;\r\n// }\r\n// `}</style>\r\n//     <div className=\"container mt-5\">\r\n//       <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//       {selectedSurah ? (\r\n//         <div className=\"list-group\">\r\n//           <div className=\"list-group-item\">\r\n\r\n//             <h5 className=\"mb-1\">سورة {selectedSurah.number}: {selectedSurah.name}</h5>\r\n//             {/* <p className=\"mb-1\">نوع السورة: {getTypeInArabic(SurahsDetails[selectedSurah.number-1].type)}</p>\r\n//             <p className=\"mb-1\">عدد الآيات: {SurahsDetails[selectedSurah.number-1].total_verses}</p> */}\r\n//             <p className=\"mb-1\">الآيات:</p>\r\n//             <div className=\"mt-3\">\r\n//               {selectedSurah.ayahs.map((ayah, index) => (\r\n//                 <p key={index}>{ayah.text}</p>\r\n//               ))}\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       ) : (\r\n//         <p>السورة غير موجودة.</p>\r\n//       )}\r\n//     </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const surahs = [\r\n//   { number: 1, name: 'ٱلْفَاتِحَة', type: 'Meccan', totalVerses: 7, ayat: ['بِسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ', 'الْحَمْدُ لِلَّهِ رَبِّ الْعَالَمِينَ', 'الرَّحْمَـٰنِ الرَّحِيمِ', 'مَالِكِ يَوْمِ الدِّينِ', 'إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ', 'اهْدِنَا الصِّرَاطَ الْمُسْتَقِيمَ', 'صِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ الْمَغْضُوبِ عَلَيْهِمْ وَلَا الضَّالِّينَ'] },\r\n//   { number: 2, name: 'ٱلْبَقَرَة', type: 'Medinan', totalVerses: 286, ayat: ['الم', 'ذَٰلِكَ الْكِتَابُ لَا رَيْبَ ۛ فِيهِ هُدًى لِّلْمُتَّقِينَ', 'الَّذِينَ يُؤْمِنُونَ بِالْغَيْبِ وَيُقِيمُونَ الصَّلَاةَ وَمِمَّا رَزَقْنَاهُمْ يُنفِقُونَ', /* add more ayat here */] },\r\n//   { number: 3, name: 'آلِ عِمْرَان', type: 'Medinan', totalVerses: 200, ayat: ['الم', 'اللَّهُ لَا إِلَٰهَ إِلَّا هُوَ الْحَيُّ الْقَيُّومُ', /* add more ayat here */] },\r\n//   // Add more surahs here\r\n// ];\r\n\r\n// const removeTashkeel = (text) => {\r\n//   return text.replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '');\r\n// };\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const surah = surahs.find(s => s.number.toString() === surahNumber);\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.ayat : []);\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.ayat.filter(ayah =>\r\n//         removeTashkeel(ayah).includes(removeTashkeel(searchTerm))\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//     <div className=\"container mt-5\">\r\n//       <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//       {selectedSurah ? (\r\n//         <div>\r\n//           <div className=\"list-group\">\r\n//             <div className=\"list-group-item\">\r\n//               <h5 className=\"mb-1\">سورة {selectedSurah.number}: {selectedSurah.name}</h5>\r\n//               <p className=\"mb-1\">نوع السورة: {selectedSurah.type === 'Meccan' ? 'مكية' : 'مدنية'}</p>\r\n//               <p className=\"mb-1\">عدد الآيات: {selectedSurah.totalVerses}</p>\r\n//             </div>\r\n//           </div>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control my-4\"\r\n//             placeholder=\"ابحث في الآيات...\"\r\n//             value={searchTerm}\r\n//             onChange={(e) => setSearchTerm(e.target.value)}\r\n//           />\r\n//           <div className=\"list-group\">\r\n//             {filteredAyat.map((ayah, index) => (\r\n//               <div key={index} className=\"list-group-item\">\r\n//                 {ayah}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       ) : (\r\n//         <p>السورة غير موجودة.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import  normalizeArabic  from '../../Helper/arabic-normalizer';\r\n// import surahs from '../../Data/ar/surah-ayahs';\r\n// import { getSurahDetails, getTypeInArabic } from '../../Helper/Utils';\r\n\r\n// const normalizeText = (text) => {\r\n//   return normalizeArabic(text)\r\n//     .normalize(\"NFD\") // Normalize to NFD (Canonical Decomposition)\r\n//     .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '') // Remove Tashkeel (diacritics)\r\n//     .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n//       // Replace Arabic letters to unify different forms of the same letter\r\n//       const map = {\r\n//         '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n//       };\r\n//       return map[char] || char;\r\n//     });\r\n// };\r\n\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n//   const [selectedAyahIndex, setSelectedAyahIndex] = useState(null); // Track selected Ayah\r\n//   const handleAyahClick = (index) => {\r\n//     setSelectedAyahIndex(index); // Set the clicked Ayah as selected\r\n//   };\r\n//   useEffect(() => {\r\n//     const surah = surahs[surahNumber];\r\n//     //.find(s => s.number.toString() === surahNumber);\r\n//     if (surah.name) document.title = surah.name;\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.ayahs : []);\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.ayahs.filter(ayah =>\r\n//         normalizeText(ayah).includes(normalizeText(searchTerm))\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//         <>\r\n//     <style>{`\r\n//     .ayah-number {\r\n//     font-weight: 600;\r\n// }\r\n// .ayah-wrapper{\r\n// display: inline;\r\n// }\r\n// .ayah-text {\r\n//   font-size: 1.2rem;\r\n//   font-family: 'Uthmani', Arial, sans-serif; /* You can use Uthmani font for Mushaf style */\r\n//   direction: rtl;\r\n// }\r\n// .ayah-number{\r\n// padding-left: 5px;\r\n// padding-right: 5px;\r\n// }\r\n// .highlighted {\r\n//   background-color: #ffeb3b; /* Yellow background for highlight */\r\n//   border-radius: 5px;\r\n//   transition: background-color 0.3s ease-in-out; /* Smooth transition for the highlight */\r\n// }\r\n// body {\r\n//   direction: rtl;\r\n//   text-align: right;\r\n// }\r\n// `}</style>\r\n//     <div className=\"container mt-5\">\r\n//       <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//       {selectedSurah ? (\r\n    \r\n//         <div>\r\n//           <div className=\"list-group\">\r\n//             <div className=\"list-group-item\">\r\n//               <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n//               <p className=\"mb-1\">نوع السورة: { getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n//               <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n//             </div>\r\n//           </div>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control my-4\"\r\n//             placeholder=\"ابحث في الآيات...\"\r\n//             value={searchTerm}\r\n//             onChange={(e) => setSearchTerm(e.target.value)}\r\n//           />\r\n//           <div className=\"ayat-container\">\r\n//             {filteredAyat.map((ayah, index) => (\r\n//               <div key={index}  onClick={() => handleAyahClick(index)}  className={`ayah-wrapper ${\r\n//                 selectedAyahIndex === index ? 'highlighted' : ''\r\n//               }`}>\r\n//                {/* Ayah Text and Number Inline */}\r\n//             <span className=\"ayah-text\">{ayah.text}</span>\r\n//             <span className=\"ayah-number\">({index + 1})</span>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       ) : (\r\n//         <p>السورة غير موجودة.</p>\r\n//       )}\r\n//     </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n//using global data\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import  normalizeArabic  from '../../Helper/arabic-normalizer';\r\n// //import surahs from '../../Data/ar/surah-ayahs';\r\n// import { getAllSurahWithAyat, getSurahDetails, getSurahWithAyat, getTypeInArabic } from '../../Helper/Utils';\r\n// import FontResizer from '../FontResizer';\r\n// import AudioPlayer from '../AudioPlayer';\r\n// import { getSurahAudioUrl } from '../../Helper/Utils';\r\n// const normalizeText = (text) => {\r\n//   return normalizeArabic(text)\r\n//     .normalize(\"NFD\") // Normalize to NFD (Canonical Decomposition)\r\n//     .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '') // Remove Tashkeel (diacritics)\r\n//     .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n//       // Replace Arabic letters to unify different forms of the same letter\r\n//       const map = {\r\n//         '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n//       };\r\n//       return map[char] || char;\r\n//     });\r\n// };\r\n\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n//   const [selectedAyahIndex, setSelectedAyahIndex] = useState(null); // Track selected Ayah\r\n//   const handleAyahClick = (index) => {\r\n//     setSelectedAyahIndex(index); // Set the clicked Ayah as selected\r\n//   };\r\n//   useEffect(() => {\r\n//     const surah = getSurahWithAyat(surahNumber);\r\n//     //surahs[surahNumber];\r\n//     //.find(s => s.number.toString() === surahNumber);\r\n//     if (surah.name) document.title = surah.name.ar ;\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.verses : []);\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.verses.filter(ayah =>\r\n//         normalizeText(ayah.text.ar).includes(normalizeText(searchTerm))\r\n//         || ayah.number.toString()==(searchTerm)\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//         <>\r\n//     <style>{`\r\n//     .ayah-number {\r\n//     font-weight: 600;\r\n// }\r\n// .ayah-wrapper{\r\n// display: inline;\r\n// }\r\n// .ayah-text {\r\n//   font-size: 1.2rem;\r\n//   font-family: 'Uthmani', Arial, sans-serif; /* You can use Uthmani font for Mushaf style */\r\n//   direction: rtl;\r\n// }\r\n// .ayah-number{\r\n// padding-left: 5px;\r\n// padding-right: 5px;\r\n// }\r\n// .highlighted {\r\n//   background-color: #ffeb3b; /* Yellow background for highlight */\r\n//   border-radius: 5px;\r\n//   transition: background-color 0.3s ease-in-out; /* Smooth transition for the highlight */\r\n// }\r\n// body {\r\n//   direction: rtl;\r\n//   text-align: right;\r\n// }\r\n// `}</style>\r\n//     <div className=\"container mt-5\">\r\n//       <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//       {selectedSurah ? (\r\n    \r\n//         <div>\r\n          \r\n//           {/* Font Size Controls */}\r\n//           <FontResizer/>\r\n\r\n//           <div className=\"list-group\">\r\n//             <div className=\"list-group-item\">\r\n//               <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n//               <p className=\"mb-1\">نوع السورة: { getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n//               <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n//               <AudioPlayer url={getSurahAudioUrl(surahNumber)}/>\r\n//             </div>\r\n//           </div>\r\n         \r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control my-4\"\r\n//             placeholder=\"ابحث في الآيات...\"\r\n//             value={searchTerm}\r\n//             onChange={(e) => setSearchTerm(e.target.value)}\r\n//           />\r\n//           <div className=\"ayat-container\">\r\n//             {filteredAyat.map((ayah, index) => (\r\n//               <div key={index}  onClick={() => handleAyahClick(index)}  className={`ayah-wrapper ${\r\n//                 selectedAyahIndex === index ? 'highlighted' : ''\r\n//               }`}>\r\n//                {/* Ayah Text and Number Inline */}\r\n//             <span className=\"ayah-text\">{ayah.text.ar}</span>\r\n//             <span className=\"ayah-number\">({ayah.number})</span>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       ) : (\r\n//         <p>السورة غير موجودة.</p>\r\n//       )}\r\n//     </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import normalizeArabic from '../../Helper/arabic-normalizer';\r\n// // import surahs from '../../Data/ar/surah-ayahs';\r\n// import { getAllSurahWithAyat, getSurahDetails, getSurahWithAyat, getTypeInArabic } from '../../Helper/Utils';\r\n// import FontResizer from '../FontResizer';\r\n// import AudioPlayer from '../AudioPlayer';\r\n// import { getSurahAudioUrl } from '../../Helper/Utils';\r\n\r\n// const normalizeText = (text) => {\r\n//   return normalizeArabic(text)\r\n//     .normalize(\"NFD\") // Normalize to NFD (Canonical Decomposition)\r\n//     .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '') // Remove Tashkeel (diacritics)\r\n//     .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n//       // Replace Arabic letters to unify different forms of the same letter\r\n//       const map = {\r\n//         '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n//       };\r\n//       return map[char] || char;\r\n//     });\r\n// };\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n//   const [selectedAyahIndex, setSelectedAyahIndex] = useState(null); // Track selected Ayah\r\n//   const [tafseer, setTafseer] = useState(null); // State for Tafseer data\r\n//   const [loadingTafseer, setLoadingTafseer] = useState(false); // State for loading indicator\r\n\r\n//   // Fetch Tafseer from API\r\n//   const fetchTafseer = async (surah, ayah) => {\r\n//     setLoadingTafseer(true);\r\n//     try {\r\n//       const response = await fetch(`http://api.quran-tafseer.com/tafseer/2/${surah}/${ayah}`);\r\n//       const data = await response.json();\r\n//       setTafseer(data); // Set the received Tafseer data\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching Tafseer:\", error);\r\n//     } finally {\r\n//       setLoadingTafseer(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleAyahClick = (index) => {\r\n//     setSelectedAyahIndex(index); // Set the clicked Ayah as selected\r\n//     const selectedAyah = filteredAyat[index];\r\n//     fetchTafseer(surahNumber, selectedAyah.number); // Fetch Tafseer for the clicked Ayah\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const surah = getSurahWithAyat(surahNumber);\r\n//     if (surah.name) document.title = surah.name.ar;\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.verses : []);\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.verses.filter(ayah =>\r\n//         normalizeText(ayah.text.ar).includes(normalizeText(searchTerm))\r\n//         || ayah.number.toString() === searchTerm\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//     <>\r\n//       <style>{`\r\n//         .ayah-number {\r\n//           font-weight: 600;\r\n//         }\r\n//         .ayah-wrapper {\r\n//           display: inline;\r\n//         }\r\n//         .ayah-text {\r\n//           font-size: 1.2rem;\r\n//           font-family: 'Uthmani', Arial, sans-serif; /* You can use Uthmani font for Mushaf style */\r\n//           direction: rtl;\r\n//         }\r\n//         .ayah-number {\r\n//           padding-left: 5px;\r\n//           padding-right: 5px;\r\n//         }\r\n//         .highlighted {\r\n//           background-color: #ffeb3b; /* Yellow background for highlight */\r\n//           border-radius: 5px;\r\n//           transition: background-color 0.3s ease-in-out; /* Smooth transition for the highlight */\r\n//         }\r\n//         body {\r\n//           direction: rtl;\r\n//           text-align: right;\r\n//         }\r\n//       `}</style>\r\n\r\n//       <div className=\"container mt-5\">\r\n//         <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//         {selectedSurah ? (\r\n//           <div>\r\n//             {/* Font Size Controls */}\r\n//             <FontResizer />\r\n\r\n//             <div className=\"list-group\">\r\n//               <div className=\"list-group-item\">\r\n//                 <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n//                 <p className=\"mb-1\">نوع السورة: {getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n//                 <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n//                 <AudioPlayer url={getSurahAudioUrl(surahNumber)} />\r\n//               </div>\r\n//             </div>\r\n\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control my-4\"\r\n//               placeholder=\"ابحث في الآيات...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//             />\r\n\r\n//             <div className=\"ayat-container\">\r\n//               {filteredAyat.map((ayah, index) => (\r\n//                 <div\r\n//                   key={index}\r\n//                   onClick={() => handleAyahClick(index)}\r\n//                   className={`ayah-wrapper ${selectedAyahIndex === index ? 'highlighted' : ''}`}\r\n//                 >\r\n//                   {/* Ayah Text and Number Inline */}\r\n//                   <span className=\"ayah-text\">{ayah.text.ar}</span>\r\n//                   <span className=\"ayah-number\">({ayah.number})</span>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             {selectedAyahIndex !== null && tafseer && (\r\n//               <div className=\"tafseer-container mt-4\">\r\n//                 <h5>تفسير الآية:</h5>\r\n//                 {loadingTafseer ? (\r\n//                   <p>جاري تحميل التفسير...</p>\r\n//                 ) : (\r\n//                   <>\r\n//                   <p>{tafseer ? tafseer.text : \"لا يوجد تفسير متاح لهذه الآية.\"}</p>\r\n//                   <div>{tafseer ? tafseer.tafseer_name : \"\"} </div>\r\n//                   </>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         ) : (\r\n//           <p>السورة غير موجودة.</p>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import normalizeArabic from '../../Helper/arabic-normalizer';\r\n// // import surahs from '../../Data/ar/surah-ayahs';\r\n// import { getAllSurahWithAyat, getSurahDetails, getSurahWithAyat, getTypeInArabic } from '../../Helper/Utils';\r\n// import FontResizer from '../FontResizer';\r\n// import AudioPlayer from '../AudioPlayer';\r\n// import { getSurahAudioUrl } from '../../Helper/Utils';\r\n\r\n// const normalizeText = (text) => {\r\n//   return normalizeArabic(text)\r\n//     .normalize(\"NFD\") // Normalize to NFD (Canonical Decomposition)\r\n//     .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '') // Remove Tashkeel (diacritics)\r\n//     .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n//       // Replace Arabic letters to unify different forms of the same letter\r\n//       const map = {\r\n//         '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n//       };\r\n//       return map[char] || char;\r\n//     });\r\n// };\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n//   const [selectedAyahIndex, setSelectedAyahIndex] = useState(null); // Track selected Ayah\r\n//   const [tafseer, setTafseer] = useState(null); // State for Tafseer data\r\n//   const [loadingTafseer, setLoadingTafseer] = useState(false); // State for loading indicator\r\n\r\n//   const navigate = useNavigate(); // Hook to programmatically navigate\r\n//   const currentSurahNumber = parseInt(surahNumber, 10); // Parse the current Surah number as an integer\r\n\r\n//   // Fetch Tafseer from API\r\n//   const fetchTafseer = async (surah, ayah) => {\r\n//     setLoadingTafseer(true);\r\n//     try {\r\n//       const response = await fetch(`https://cdn.jsdelivr.net/gh/spa5k/tafsir_api@main/tafsir/ar-tafsir-al-baghawi/${surah}/${ayah}.json`);\r\n//       //fetch(`http://api.quran-tafseer.com/tafseer/2/${surah}/${ayah}`);\r\n//       const data = await response.json();\r\n//       setTafseer(data); // Set the received Tafseer data\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching Tafseer:\", error);\r\n//     } finally {\r\n//       setLoadingTafseer(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleAyahClick = (index) => {\r\n//     setSelectedAyahIndex(index); // Set the clicked Ayah as selected\r\n//     const selectedAyah = filteredAyat[index];\r\n//     fetchTafseer(surahNumber, selectedAyah.number); // Fetch Tafseer for the clicked Ayah\r\n//   };\r\n\r\n//   // Go to the next surah\r\n//   const goToNextSurah = () => {\r\n//     const nextSurah = currentSurahNumber === 114 ? 1 : currentSurahNumber + 1;\r\n//     navigate(`/surahs/${nextSurah}`);\r\n//   };\r\n\r\n//   // Go to the previous surah\r\n//   const goToPreviousSurah = () => {\r\n//     const prevSurah = currentSurahNumber === 1 ? 114 : currentSurahNumber - 1;\r\n//     navigate(`/surahs/${prevSurah}`);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const surah = getSurahWithAyat(surahNumber);\r\n//     if (surah.name) document.title = surah.name.ar;\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.verses : []);\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.verses.filter(ayah =>\r\n//         normalizeText(ayah.text.ar).includes(normalizeText(searchTerm))\r\n//         || ayah.number.toString() === searchTerm\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//     <>\r\n//       <style>{`\r\n//         .ayah-number {\r\n//           font-weight: 600;\r\n//         }\r\n//         .ayah-wrapper {\r\n//           display: inline;\r\n//         }\r\n//         .ayah-text {\r\n//           font-size: 1.2rem;\r\n//           font-family: 'Uthmani', Arial, sans-serif; /* You can use Uthmani font for Mushaf style */\r\n//           direction: rtl;\r\n//         }\r\n//         .ayah-number {\r\n//           padding-left: 5px;\r\n//           padding-right: 5px;\r\n//         }\r\n//         .highlighted {\r\n//           background-color: #ffeb3b; /* Yellow background for highlight */\r\n//           border-radius: 5px;\r\n//           transition: background-color 0.3s ease-in-out; /* Smooth transition for the highlight */\r\n//         }\r\n//         body {\r\n//           direction: rtl;\r\n//           text-align: right;\r\n//         }\r\n//       `}</style>\r\n\r\n//       <div className=\"container mt-5\">\r\n//         <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//         {selectedSurah ? (\r\n//           <div>\r\n//             {/* Font Size Controls */}\r\n//             <FontResizer />\r\n\r\n//             <div className=\"list-group\">\r\n//               <div className=\"list-group-item\">\r\n//                 <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n//                 <p className=\"mb-1\">نوع السورة: {getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n//                 <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n//                 <AudioPlayer url={getSurahAudioUrl(surahNumber)} />\r\n//               </div>\r\n//             </div>\r\n\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control my-4\"\r\n//               placeholder=\"ابحث في الآيات...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//             />\r\n\r\n//             <div className=\"ayat-container\">\r\n//               {filteredAyat.map((ayah, index) => (\r\n//                 <div\r\n//                   key={index}\r\n//                   onClick={() => handleAyahClick(index)}\r\n//                   className={`ayah-wrapper ${selectedAyahIndex === index ? 'highlighted' : ''}`}\r\n//                 >\r\n//                   {/* Ayah Text and Number Inline */}\r\n//                   <span className=\"ayah-text\">{ayah.text.ar}</span>\r\n//                   <span className=\"ayah-number\">({ayah.number})</span>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             {selectedAyahIndex !== null && tafseer && (\r\n//               <div className=\"tafseer-container mt-4\">\r\n//                 <h5>تفسير الآية:</h5>\r\n//                 {loadingTafseer ? (\r\n//                   <p>جاري تحميل التفسير...</p>\r\n//                 ) : (\r\n//                   <>\r\n//                   <p>{tafseer ? tafseer.text : \"لا يوجد تفسير متاح لهذه الآية.\"}</p>\r\n//                   <div>{tafseer ? /*tafseer.tafseer_name*/\"تفسير البغوى\" : \"\"} </div>\r\n//                   </>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n\r\n//             {/* Navigation Buttons */}\r\n//             <div className=\"mt-4\">\r\n//               <button onClick={goToPreviousSurah} className=\"btn btn-primary me-3\">السورة السابقة</button>\r\n//               <button onClick={goToNextSurah} className=\"btn btn-primary\">السورة التالية</button>\r\n//             </div>\r\n//           </div>\r\n//         ) : (\r\n//           <p>السورة غير موجودة.</p>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import normalizeArabic from '../../Helper/arabic-normalizer';\r\n// import { getAllSurahWithAyat, getSurahDetails, getSurahWithAyat, getTypeInArabic } from '../../Helper/Utils';\r\n// import FontResizer from '../FontResizer';\r\n// import AudioPlayer from '../AudioPlayer';\r\n// import { getSurahAudioUrl } from '../../Helper/Utils';\r\n\r\n// const normalizeText = (text) => {\r\n//   return normalizeArabic(text)\r\n//     .normalize(\"NFD\")\r\n//     .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '')\r\n//     .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n//       const map = {\r\n//         '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n//       };\r\n//       return map[char] || char;\r\n//     });\r\n// };\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n//   const [selectedAyahIndex, setSelectedAyahIndex] = useState(null);\r\n//   const [tafseer, setTafseer] = useState(null);\r\n//   const [loadingTafseer, setLoadingTafseer] = useState(false);\r\n//   const [showModal, setShowModal] = useState(false); // Manage modal visibility\r\n\r\n//   const navigate = useNavigate();\r\n//   const currentSurahNumber = parseInt(surahNumber, 10);\r\n\r\n//   // Fetch Tafseer from API\r\n//   const fetchTafseer = async (surah, ayah) => {\r\n//     setLoadingTafseer(true);\r\n//     try {\r\n//       const response = await fetch(`https://cdn.jsdelivr.net/gh/spa5k/tafsir_api@main/tafsir/ar-tafsir-al-baghawi/${surah}/${ayah}.json`);\r\n//       const data = await response.json();\r\n//       setTafseer(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching Tafseer:\", error);\r\n//     } finally {\r\n//       setLoadingTafseer(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleAyahClick = (index) => {\r\n//     setSelectedAyahIndex(index);\r\n//     const selectedAyah = filteredAyat[index];\r\n//     fetchTafseer(surahNumber, selectedAyah.number);\r\n//     setShowModal(true); // Show the modal when Ayah is clicked\r\n//   };\r\n\r\n//   const handleCloseModal = () => setShowModal(false); // Close modal\r\n\r\n//   useEffect(() => {\r\n//     const surah = getSurahWithAyat(surahNumber);\r\n//     if (surah.name) document.title = surah.name.ar;\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.verses : []);\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.verses.filter(ayah =>\r\n//         normalizeText(ayah.text.ar).includes(normalizeText(searchTerm))\r\n//         || ayah.number.toString() === searchTerm\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//     <>\r\n//       <style>{`\r\n//         .ayah-number {\r\n//           font-weight: 600;\r\n//         }\r\n//         .ayah-wrapper {\r\n//           display: inline;\r\n//         }\r\n//         .ayah-text {\r\n//           font-size: 1.2rem;\r\n//           font-family: 'Uthmani', Arial, sans-serif;\r\n//           direction: rtl;\r\n//         }\r\n//         .ayah-number {\r\n//           padding-left: 5px;\r\n//           padding-right: 5px;\r\n//         }\r\n//         .highlighted {\r\n//           background-color: #ffeb3b;\r\n//           border-radius: 5px;\r\n//           transition: background-color 0.3s ease-in-out;\r\n//         }\r\n//         body {\r\n//           direction: rtl;\r\n//           text-align: right;\r\n//         }\r\n//       `}</style>\r\n\r\n//       <div className=\"container mt-5\">\r\n//         <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//         {selectedSurah ? (\r\n//           <div>\r\n//             <FontResizer />\r\n\r\n//             <div className=\"list-group\">\r\n//               <div className=\"list-group-item\">\r\n//                 <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n//                 <p className=\"mb-1\">نوع السورة: {getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n//                 <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n//                 <AudioPlayer url={getSurahAudioUrl(surahNumber)} />\r\n//               </div>\r\n//             </div>\r\n\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control my-4\"\r\n//               placeholder=\"ابحث في الآيات...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//             />\r\n\r\n//             <div className=\"ayat-container\">\r\n//               {filteredAyat.map((ayah, index) => (\r\n//                 <div\r\n//                   key={index}\r\n//                   onClick={() => handleAyahClick(index)}\r\n//                   className={`ayah-wrapper ${selectedAyahIndex === index ? 'highlighted' : ''}`}\r\n//                 >\r\n//                   <span className=\"ayah-text\">{ayah.text.ar}</span>\r\n//                   <span className=\"ayah-number\">({ayah.number})</span>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             {/* Navigation Buttons */}\r\n//             <div className=\"mt-4\">\r\n//               <button onClick={() => navigate(`/surahs/${currentSurahNumber - 1}`)} className=\"btn btn-primary me-3\">السورة السابقة</button>\r\n//               <button onClick={() => navigate(`/surahs/${currentSurahNumber + 1}`)} className=\"btn btn-primary\">السورة التالية</button>\r\n//             </div>\r\n//           </div>\r\n//         ) : (\r\n//           <p>السورة غير موجودة.</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Modal for Tafseer */}\r\n//       <div className={`modal fade ${showModal ? 'show' : ''}`} tabIndex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\" style={{ display: showModal ? 'block' : 'none' }}>\r\n//         <div className=\"modal-dialog\">\r\n//           <div className=\"modal-content\">\r\n//             <div className=\"modal-header\">\r\n//               <h5 className=\"modal-title\" id=\"exampleModalLabel\">تفسير الآية</h5>\r\n//               <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={handleCloseModal}></button>\r\n//             </div>\r\n//             <div className=\"modal-body\">\r\n//               {loadingTafseer ? (\r\n//                 <p>جاري تحميل التفسير...</p>\r\n//               ) : (\r\n//                 <div>\r\n//                   <p>{tafseer ? tafseer.text : \"لا يوجد تفسير متاح لهذه الآية.\"}</p>\r\n//                   <div>{tafseer ? \"تفسير البغوي\" : \"\"}</div>\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//             <div className=\"modal-footer\">\r\n//               <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\" onClick={handleCloseModal}>إغلاق</button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import normalizeArabic from '../../Helper/arabic-normalizer';\r\n// import { getAllSurahWithAyat, getSurahDetails, getSurahWithAyat, getTypeInArabic } from '../../Helper/Utils';\r\n// import FontResizer from '../FontResizer';\r\n// import AudioPlayer from '../AudioPlayer';\r\n// import { getSurahAudioUrl } from '../../Helper/Utils';\r\n\r\n// const normalizeText = (text) => {\r\n//   return normalizeArabic(text)\r\n//     .normalize(\"NFD\")\r\n//     .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '')\r\n//     .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n//       const map = {\r\n//         '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n//       };\r\n//       return map[char] || char;\r\n//     });\r\n// };\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n//   const [selectedAyahIndex, setSelectedAyahIndex] = useState(null);\r\n//   const [tafseer, setTafseer] = useState(null);\r\n//   const [loadingTafseer, setLoadingTafseer] = useState(false);\r\n//   const [showModal, setShowModal] = useState(false);\r\n\r\n//   const navigate = useNavigate();\r\n//   const currentSurahNumber = parseInt(surahNumber, 10);\r\n\r\n//   // Fetch Tafseer from API\r\n//   const fetchTafseer = async (surah, ayah) => {\r\n//     setLoadingTafseer(true);\r\n//     try {\r\n//       const response = await fetch(`https://cdn.jsdelivr.net/gh/spa5k/tafsir_api@main/tafsir/ar-tafsir-al-baghawi/${surah}/${ayah}.json`);\r\n//       const data = await response.json();\r\n//       setTafseer(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching Tafseer:\", error);\r\n//     } finally {\r\n//       setLoadingTafseer(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleAyahClick = (index) => {\r\n//     setSelectedAyahIndex(index);\r\n//     const selectedAyah = filteredAyat[index];\r\n//     fetchTafseer(surahNumber, selectedAyah.number);\r\n//     setShowModal(true); // Show the modal when Ayah is clicked\r\n//   };\r\n\r\n//   const handleCloseModal = () => setShowModal(false); // Close modal\r\n\r\n//   // Close modal if clicking outside of it\r\n//   const handleBackdropClick = (e) => {\r\n//     if (e.target.classList.contains(\"modal-overlay\")) {\r\n//       handleCloseModal();\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const surah = getSurahWithAyat(surahNumber);\r\n//     if (surah.name) document.title = surah.name.ar;\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.verses : []);\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.verses.filter(ayah =>\r\n//         normalizeText(ayah.text.ar).includes(normalizeText(searchTerm))\r\n//         || ayah.number.toString() === searchTerm\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//     <>\r\n//       <style>{`\r\n//         .ayah-number {\r\n//           font-weight: 600;\r\n//         }\r\n//         .ayah-wrapper {\r\n//           display: inline;\r\n//         }\r\n//         .ayah-text {\r\n//           font-size: 1.2rem;\r\n//           font-family: 'Uthmani', Arial, sans-serif;\r\n//           direction: rtl;\r\n//         }\r\n//         .ayah-number {\r\n//           padding-left: 5px;\r\n//           padding-right: 5px;\r\n//         }\r\n//         .highlighted {\r\n//           background-color: #ffeb3b;\r\n//           border-radius: 5px;\r\n//           transition: background-color 0.3s ease-in-out;\r\n//         }\r\n//         body {\r\n//           direction: rtl;\r\n//           text-align: right;\r\n//         }\r\n//         .modal-dialog {\r\n//           max-width: 90%;\r\n//           width: 800px; /* Adjust this value to make the modal larger */\r\n//         }\r\n//         .modal-body {\r\n//           max-height: 400px;\r\n//           overflow-y: auto; /* Make the modal content scrollable */\r\n//         }\r\n//         .modal-overlay {\r\n//           position: fixed;\r\n//           top: 0;\r\n//           left: 0;\r\n//           width: 100%;\r\n//           height: 100%;\r\n//           background-color: rgba(0, 0, 0, 0.5);\r\n//           z-index: 1040;\r\n//         }\r\n//       `}</style>\r\n\r\n//       <div className=\"container mt-5\">\r\n//         <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//         {selectedSurah ? (\r\n//           <div>\r\n//             <FontResizer />\r\n\r\n//             <div className=\"list-group\">\r\n//               <div className=\"list-group-item\">\r\n//                 <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n//                 <p className=\"mb-1\">نوع السورة: {getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n//                 <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n//                 <AudioPlayer url={getSurahAudioUrl(surahNumber)} />\r\n//               </div>\r\n//             </div>\r\n\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control my-4\"\r\n//               placeholder=\"ابحث في الآيات...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//             />\r\n\r\n//             <div className=\"ayat-container\">\r\n//               {filteredAyat.map((ayah, index) => (\r\n//                 <div\r\n//                   key={index}\r\n//                   onClick={() => handleAyahClick(index)}\r\n//                   className={`ayah-wrapper ${selectedAyahIndex === index ? 'highlighted' : ''}`}\r\n//                 >\r\n//                   <span className=\"ayah-text\">{ayah.text.ar}</span>\r\n//                   <span className=\"ayah-number\">({ayah.number})</span>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             {/* Navigation Buttons */}\r\n//             <div className=\"mt-4\">\r\n//               <button onClick={() => navigate(`/surahs/${currentSurahNumber - 1}`)} className=\"btn btn-primary me-3\">السورة السابقة</button>\r\n//               <button onClick={() => navigate(`/surahs/${currentSurahNumber + 1}`)} className=\"btn btn-primary\">السورة التالية</button>\r\n//             </div>\r\n//           </div>\r\n//         ) : (\r\n//           <p>السورة غير موجودة.</p>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Modal for Tafseer */}\r\n//       <div\r\n//         className={`modal fade ${showModal ? 'show' : ''} modal-overlay`}\r\n//         tabIndex=\"-1\"\r\n//         aria-labelledby=\"exampleModalLabel\"\r\n//         aria-hidden=\"true\"\r\n//         style={{ display: showModal ? 'block' : 'none' }}\r\n//         onClick={handleBackdropClick}\r\n//       >\r\n//         <div className=\"modal-dialog\">\r\n//           <div className=\"modal-content\">\r\n//             <div className=\"modal-header\">\r\n//               <h5 className=\"modal-title w-100\" id=\"exampleModalLabel\">تفسير الآية</h5>\r\n//               <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={handleCloseModal}></button>\r\n//             </div>\r\n//             <div className=\"modal-body\">\r\n//               {loadingTafseer ? (\r\n//                 <p>جاري تحميل التفسير...</p>\r\n//               ) : (\r\n//                 <div>\r\n//                   <p>{tafseer ? tafseer.text : \"لا يوجد تفسير متاح لهذه الآية.\"}</p>\r\n//                   <div>{tafseer ? \"تفسير البغوي\" : \"\"}</div>\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//             <div className=\"modal-footer\">\r\n//               <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\" onClick={handleCloseModal}>إغلاق</button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import normalizeArabic from '../../Helper/arabic-normalizer';\r\n// import { getAllSurahWithAyat, getSurahDetails, getSurahWithAyat, getTypeInArabic } from '../../Helper/Utils';\r\n// import FontResizer from '../FontResizer';\r\n// import AudioPlayer from '../AudioPlayer';\r\n// import { getSurahAudioUrl } from '../../Helper/Utils';\r\n\r\n// const normalizeText = (text) => {\r\n//   return normalizeArabic(text)\r\n//     .normalize(\"NFD\")\r\n//     .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '')\r\n//     .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n//       const map = {\r\n//         '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n//       };\r\n//       return map[char] || char;\r\n//     });\r\n// };\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n//   const [selectedAyahIndex, setSelectedAyahIndex] = useState(null);\r\n//   const [tafseer, setTafseer] = useState(null);\r\n//   const [loadingTafseer, setLoadingTafseer] = useState(false);\r\n//   const [currentPage, setCurrentPage] = useState(1); // State for current page\r\n//   const [ayatByPage, setAyatByPage] = useState({}); // To hold ayat grouped by page number\r\n\r\n//   const navigate = useNavigate();\r\n//   const currentSurahNumber = parseInt(surahNumber, 10);\r\n\r\n//   // Fetch Tafseer from API\r\n//   const fetchTafseer = async (surah, ayah) => {\r\n//     setLoadingTafseer(true);\r\n//     try {\r\n//       const response = await fetch(`https://cdn.jsdelivr.net/gh/spa5k/tafsir_api@main/tafsir/ar-tafsir-al-baghawi/${surah}/${ayah}.json`);\r\n//       const data = await response.json();\r\n//       setTafseer(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching Tafseer:\", error);\r\n//     } finally {\r\n//       setLoadingTafseer(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleAyahClick = (index) => {\r\n//     setSelectedAyahIndex(index);\r\n//     const selectedAyah = filteredAyat[index];\r\n//     fetchTafseer(surahNumber, selectedAyah.number);\r\n//   };\r\n\r\n//   // Group Ayat by page\r\n//   const groupAyatByPage = (ayat) => {\r\n//     const grouped = ayat.reduce((acc, currentAyah) => {\r\n//       const page = currentAyah.page || 1; // Default to 1 if no page is provided\r\n//       if (!acc[page]) acc[page] = [];\r\n//       acc[page].push(currentAyah);\r\n//       return acc;\r\n//     }, {});\r\n//     setAyatByPage(grouped);\r\n//   };\r\n\r\n//   // Handle page change\r\n//   const handlePageChange = (page) => {\r\n//     setCurrentPage(page);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const surah = getSurahWithAyat(surahNumber);\r\n//     if (surah.name) document.title = surah.name.ar;\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.verses : []);\r\n//     groupAyatByPage(surah ? surah.verses : []); // Group the ayat by their page numbers\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.verses.filter(ayah =>\r\n//         normalizeText(ayah.text.ar).includes(normalizeText(searchTerm))\r\n//         || ayah.number.toString() === searchTerm\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//       groupAyatByPage(filtered); // Group the filtered ayat as well\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//     <>\r\n//       <style>{`\r\n//         .ayah-number {\r\n//           font-weight: 600;\r\n//         }\r\n//         .ayah-wrapper {\r\n//           display: inline;\r\n//         }\r\n//         .ayah-text {\r\n//           font-size: 1.2rem;\r\n//           font-family: 'Uthmani', Arial, sans-serif;\r\n//           direction: rtl;\r\n//         }\r\n//         .ayah-number {\r\n//           padding-left: 5px;\r\n//           padding-right: 5px;\r\n//         }\r\n//         .highlighted {\r\n//           background-color: #ffeb3b;\r\n//           border-radius: 5px;\r\n//           transition: background-color 0.3s ease-in-out;\r\n//         }\r\n//         body {\r\n//           direction: rtl;\r\n//           text-align: right;\r\n//         }\r\n//       `}</style>\r\n\r\n//       <div className=\"container mt-5\">\r\n//         <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//         {selectedSurah ? (\r\n//           <div>\r\n//             <FontResizer />\r\n\r\n//             <div className=\"list-group\">\r\n//               <div className=\"list-group-item\">\r\n//                 <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n//                 <p className=\"mb-1\">نوع السورة: {getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n//                 <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n//                 <AudioPlayer url={getSurahAudioUrl(surahNumber)} />\r\n//               </div>\r\n//             </div>\r\n\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control my-4\"\r\n//               placeholder=\"ابحث في الآيات...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//             />\r\n\r\n//             {/* Display Ayat for the selected page */}\r\n//             <div className=\"ayat-container\">\r\n//               {ayatByPage[currentPage] && ayatByPage[currentPage].map((ayah, index) => (\r\n//                 <div\r\n//                   key={index}\r\n//                   onClick={() => handleAyahClick(index)}\r\n//                   className={`ayah-wrapper ${selectedAyahIndex === index ? 'highlighted' : ''}`}\r\n//                 >\r\n//                   <span className=\"ayah-text\">{ayah.text.ar}</span>\r\n//                   <span className=\"ayah-number\">({ayah.number})</span>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             {/* Pagination Controls */}\r\n//             <div className=\"pagination-container\">\r\n//               <button\r\n//                 className=\"btn btn-secondary\"\r\n//                 onClick={() => handlePageChange(currentPage - 1)}\r\n//                 disabled={currentPage === 1}\r\n//               >\r\n//                 الصفحة السابقة\r\n//               </button>\r\n//               <span className=\"mx-2\">الصفحة {currentPage}</span>\r\n//               <button\r\n//                 className=\"btn btn-secondary\"\r\n//                 onClick={() => handlePageChange(currentPage + 1)}\r\n//                 disabled={!ayatByPage[currentPage + 1]}\r\n//               >\r\n//                 الصفحة التالية\r\n//               </button>\r\n//             </div>\r\n\r\n//             {/* Navigation Buttons */}\r\n//             <div className=\"mt-4\">\r\n//               <button onClick={() => navigate(`/surahs/${currentSurahNumber - 1}`)} className=\"btn btn-primary me-3\">السورة السابقة</button>\r\n//               <button onClick={() => navigate(`/surahs/${currentSurahNumber + 1}`)} className=\"btn btn-primary\">السورة التالية</button>\r\n//             </div>\r\n//           </div>\r\n//         ) : (\r\n//           <p>السورة غير موجودة.</p>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import normalizeArabic from '../../Helper/arabic-normalizer';\r\n// import { getSurahDetails, getSurahWithAyat, getTypeInArabic } from '../../Helper/Utils';\r\n// import FontResizer from '../FontResizer';\r\n// import AudioPlayer from '../AudioPlayer';\r\n// import { getSurahAudioUrl } from '../../Helper/Utils';\r\n\r\n// const normalizeText = (text) => {\r\n//   return normalizeArabic(text)\r\n//     .normalize(\"NFD\")\r\n//     .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '')\r\n//     .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n//       const map = {\r\n//         '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n//       };\r\n//       return map[char] || char;\r\n//     });\r\n// };\r\n\r\n// const SurahViewer = () => {\r\n//   const { surahNumber } = useParams();\r\n//   const [selectedSurah, setSelectedSurah] = useState(null);\r\n//   const [searchTerm, setSearchTerm] = useState('');\r\n//   const [filteredAyat, setFilteredAyat] = useState([]);\r\n//   const [selectedAyahIndex, setSelectedAyahIndex] = useState(null);\r\n//   const [tafseer, setTafseer] = useState(null);\r\n//   const [loadingTafseer, setLoadingTafseer] = useState(false);\r\n//   const [currentPage, setCurrentPage] = useState(1); // Default to the first page\r\n//   const [ayatByPage, setAyatByPage] = useState({}); // To hold ayat grouped by page number\r\n\r\n//   const navigate = useNavigate();\r\n//   const currentSurahNumber = parseInt(surahNumber, 10);\r\n\r\n//   // Fetch Tafseer from API\r\n//   const fetchTafseer = async (surah, ayah) => {\r\n//     setLoadingTafseer(true);\r\n//     try {\r\n//       const response = await fetch(`https://cdn.jsdelivr.net/gh/spa5k/tafsir_api@main/tafsir/ar-tafsir-al-baghawi/${surah}/${ayah}.json`);\r\n//       const data = await response.json();\r\n//       setTafseer(data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching Tafseer:\", error);\r\n//     } finally {\r\n//       setLoadingTafseer(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleAyahClick = (index) => {\r\n//     setSelectedAyahIndex(index);\r\n//     const selectedAyah = filteredAyat[index];\r\n//     fetchTafseer(surahNumber, selectedAyah.number);\r\n//   };\r\n\r\n//   // Group Ayat by page\r\n//   const groupAyatByPage = (ayat) => {\r\n//     const grouped = ayat.reduce((acc, currentAyah) => {\r\n//       const page = currentAyah.page || 1; // Default to 1 if no page is provided\r\n//       if (!acc[page]) acc[page] = [];\r\n//       acc[page].push(currentAyah);\r\n//       return acc;\r\n//     }, {});\r\n//     setAyatByPage(grouped);\r\n//   };\r\n\r\n//   // Handle page change\r\n//   const handlePageChange = (page) => {\r\n//     setCurrentPage(page);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const surah = getSurahWithAyat(surahNumber);\r\n//     if (surah.name) document.title = surah.name.ar;\r\n//     setSelectedSurah(surah || null);\r\n//     setFilteredAyat(surah ? surah.verses : []);\r\n//     groupAyatByPage(surah ? surah.verses : []); // Group the ayat by their page numbers\r\n//   }, [surahNumber]);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedSurah) {\r\n//       const filtered = selectedSurah.verses.filter(ayah =>\r\n//         normalizeText(ayah.text.ar).includes(normalizeText(searchTerm))\r\n//         || ayah.number.toString() === searchTerm\r\n//       );\r\n//       setFilteredAyat(filtered);\r\n//       groupAyatByPage(filtered); // Group the filtered ayat as well\r\n//     }\r\n//   }, [searchTerm, selectedSurah]);\r\n\r\n//   return (\r\n//     <>\r\n//       <style>{`\r\n//         .ayah-number {\r\n//           font-weight: 600;\r\n//         }\r\n//         .ayah-wrapper {\r\n//           display: inline;\r\n//         }\r\n//         .ayah-text {\r\n//           font-size: 1.2rem;\r\n//           font-family: 'Uthmani', Arial, sans-serif;\r\n//           direction: rtl;\r\n//         }\r\n//         .ayah-number {\r\n//           padding-left: 5px;\r\n//           padding-right: 5px;\r\n//         }\r\n//         .highlighted {\r\n//           background-color: #ffeb3b;\r\n//           border-radius: 5px;\r\n//           transition: background-color 0.3s ease-in-out;\r\n//         }\r\n//         body {\r\n//           direction: rtl;\r\n//           text-align: right;\r\n//         }\r\n//       `}</style>\r\n\r\n//       <div className=\"container mt-5\">\r\n//         <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n//         {selectedSurah ? (\r\n//           <div>\r\n//             <FontResizer />\r\n\r\n//             <div className=\"list-group\">\r\n//               <div className=\"list-group-item\">\r\n//                 <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n//                 <p className=\"mb-1\">نوع السورة: {getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n//                 <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n//                 <AudioPlayer url={getSurahAudioUrl(surahNumber)} />\r\n//               </div>\r\n//             </div>\r\n\r\n//             <input\r\n//               type=\"text\"\r\n//               className=\"form-control my-4\"\r\n//               placeholder=\"ابحث في الآيات...\"\r\n//               value={searchTerm}\r\n//               onChange={(e) => setSearchTerm(e.target.value)}\r\n//             />\r\n\r\n//             {/* Display Ayat for the selected page */}\r\n//             <div className=\"ayat-container\">\r\n//               {ayatByPage[currentPage] && ayatByPage[currentPage].map((ayah, index) => (\r\n//                 <div\r\n//                   key={index}\r\n//                   onClick={() => handleAyahClick(index)}\r\n//                   className={`ayah-wrapper ${selectedAyahIndex === index ? 'highlighted' : ''}`}\r\n//                 >\r\n//                   <span className=\"ayah-text\">{ayah.text.ar}</span>\r\n//                   <span className=\"ayah-number\">({ayah.number})</span>\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n\r\n//             {/* Display Tafseer if available */}\r\n//             {selectedAyahIndex !== null && tafseer && (\r\n//               <div className=\"tafseer-container mt-4\">\r\n//                 <h5>تفسير الآية:</h5>\r\n//                 {loadingTafseer ? (\r\n//                   <p>جاري تحميل التفسير...</p>\r\n//                 ) : (\r\n//                   <p>{tafseer ? tafseer.text : \"لا يوجد تفسير متاح لهذه الآية.\"}</p>\r\n//                 )}\r\n//               </div>\r\n//             )}\r\n\r\n//             {/* Pagination Controls */}\r\n//             <div className=\"pagination-container\">\r\n//               <button\r\n//                 className=\"btn btn-secondary\"\r\n//                 onClick={() => handlePageChange(currentPage - 1)}\r\n//                 disabled={currentPage === 1}\r\n//               >\r\n//                 الصفحة السابقة\r\n//               </button>\r\n//               <span className=\"mx-2\">الصفحة {currentPage}</span>\r\n//               <button\r\n//                 className=\"btn btn-secondary\"\r\n//                 onClick={() => handlePageChange(currentPage + 1)}\r\n//                 disabled={!ayatByPage[currentPage + 1]}\r\n//               >\r\n//                 الصفحة التالية\r\n//               </button>\r\n//             </div>\r\n\r\n//             {/* Navigation Buttons */}\r\n//             <div className=\"mt-4\">\r\n//               <button onClick={() => navigate(`/surahs/${currentSurahNumber - 1}`)} className=\"btn btn-primary me-3\">السورة السابقة</button>\r\n//               <button onClick={() => navigate(`/surahs/${currentSurahNumber + 1}`)} className=\"btn btn-primary\">السورة التالية</button>\r\n//             </div>\r\n//           </div>\r\n//         ) : (\r\n//           <p>السورة غير موجودة.</p>\r\n//         )}\r\n//       </div>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SurahViewer;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport normalizeArabic from '../../Helper/arabic-normalizer';\r\nimport { getSurahDetails, getSurahWithAyat, getTypeInArabic } from '../../Helper/Utils';\r\nimport FontResizer from '../FontResizer';\r\nimport AudioPlayer from '../AudioPlayer';\r\nimport { getSurahAudioUrl } from '../../Helper/Utils';\r\n\r\nconst normalizeText = (text) => {\r\n  return normalizeArabic(text)\r\n    .normalize(\"NFD\")\r\n    .replace(/[\\u0617-\\u061A\\u064B-\\u0652]/g, '')\r\n    .replace(/[\\u0640-\\u064A]/g, (char) => {\r\n      const map = {\r\n        '\\u0640': '', '\\u0641': 'ف', '\\u0642': 'ق', '\\u0643': 'ك', '\\u0644': 'ل', '\\u0645': 'م', '\\u0646': 'ن', '\\u0647': 'ه', '\\u0648': 'و', '\\u0649': 'ى', '\\u064A': 'ي'\r\n      };\r\n      return map[char] || char;\r\n    });\r\n};\r\n\r\nconst SurahViewer = () => {\r\n  const { surahNumber } = useParams();\r\n  const [selectedSurah, setSelectedSurah] = useState(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filteredAyat, setFilteredAyat] = useState([]);\r\n  const [selectedAyahIndex, setSelectedAyahIndex] = useState(null);\r\n  const [tafseer, setTafseer] = useState(null);\r\n  const [loadingTafseer, setLoadingTafseer] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(1); // Default to the first page\r\n  const [ayatByPage, setAyatByPage] = useState({}); // To hold ayat grouped by page number\r\n\r\n  const navigate = useNavigate();\r\n  const currentSurahNumber = parseInt(surahNumber, 10);\r\n\r\n  // Fetch Tafseer from API\r\n  const fetchTafseer = async (surah, ayah) => {\r\n    setLoadingTafseer(true);\r\n    try {\r\n      const response = await fetch(`https://cdn.jsdelivr.net/gh/spa5k/tafsir_api@main/tafsir/ar-tafsir-al-baghawi/${surah}/${ayah}.json`);\r\n      const data = await response.json();\r\n      setTafseer(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching Tafseer:\", error);\r\n    } finally {\r\n      setLoadingTafseer(false);\r\n    }\r\n  };\r\n\r\n  const handleAyahClick = (index) => {\r\n    \r\n    setSelectedAyahIndex(index);\r\n    const selectedAyah = filteredAyat[index-1];\r\n    fetchTafseer(surahNumber, selectedAyah.number);\r\n  };\r\n\r\n  // Group Ayat by page\r\n  const groupAyatByPage = (ayat) => {\r\n    const grouped = ayat.reduce((acc, currentAyah) => {\r\n      const page = currentAyah.page || 1; // Default to 1 if no page is provided\r\n      if (!acc[page]) acc[page] = [];\r\n      acc[page].push(currentAyah);\r\n      return acc;\r\n    }, {});\r\n    setAyatByPage(grouped);\r\n  };\r\n\r\n  // Handle page change\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const surah = getSurahWithAyat(surahNumber);\r\n    if (surah.name) document.title = surah.name.ar;\r\n    setSelectedSurah(surah || null);\r\n    setFilteredAyat(surah ? surah.verses : []);\r\n    groupAyatByPage(surah ? surah.verses : []); // Group the ayat by their page numbers\r\n\r\n    // Set the first page to the page of the first ayah\r\n    const firstAyahPage = surah?.verses?.[0]?.page || 1; // Default to 1 if no page is available\r\n    setCurrentPage(firstAyahPage);\r\n  }, [surahNumber]);\r\n\r\n  useEffect(() => {\r\n    if (selectedSurah) {\r\n      const filtered = selectedSurah.verses.filter(ayah =>\r\n        normalizeText(ayah.text.ar).includes(normalizeText(searchTerm))\r\n        || ayah.number.toString() === searchTerm\r\n      );\r\n      setFilteredAyat(filtered);\r\n      groupAyatByPage(filtered); // Group the filtered ayat as well\r\n    }\r\n  }, [searchTerm, selectedSurah]);\r\n\r\n  return (\r\n    <>\r\n      <style>{`\r\n        .ayah-number {\r\n          font-weight: 600;\r\n        }\r\n        .ayah-wrapper {\r\n          display: inline;\r\n        }\r\n        .ayah-text {\r\n          font-size: 1.2rem;\r\n          font-family: 'Uthmani', Arial, sans-serif;\r\n          direction: rtl;\r\n        }\r\n        .ayah-number {\r\n          padding-left: 5px;\r\n          padding-right: 5px;\r\n        }\r\n        .highlighted {\r\n          background-color: #ffeb3b;\r\n          border-radius: 5px;\r\n          transition: background-color 0.3s ease-in-out;\r\n        }\r\n        body {\r\n          direction: rtl;\r\n          text-align: right;\r\n        }\r\n      `}</style>\r\n\r\n      <div className=\"container mt-5\">\r\n        <h1 className=\"mb-4\">عرض آيات السورة</h1>\r\n        {selectedSurah ? (\r\n          <div>\r\n            <FontResizer />\r\n\r\n            <div className=\"list-group\">\r\n              <div className=\"list-group-item\">\r\n                <h5 className=\"mb-1\">سورة {surahNumber}: {getSurahDetails(surahNumber).name}</h5>\r\n                <p className=\"mb-1\">نوع السورة: {getTypeInArabic(getSurahDetails(surahNumber).type)}</p>\r\n                <p className=\"mb-1\">عدد الآيات: {getSurahDetails(surahNumber).total_verses}</p>\r\n                <AudioPlayer url={getSurahAudioUrl(surahNumber)} />\r\n              </div>\r\n            </div>\r\n\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control my-4\"\r\n              placeholder=\"ابحث في الآيات...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n            />\r\n\r\n            {/* Display Ayat for the selected page */}\r\n            <div className=\"ayat-container\">\r\n              {ayatByPage[currentPage] && ayatByPage[currentPage].map((ayah, index) => (\r\n                <div\r\n                  key={ayah.number}\r\n                  onClick={() => handleAyahClick(ayah.number)}\r\n                  className={`ayah-wrapper ${selectedAyahIndex === ayah.number ? 'highlighted' : ''}`}\r\n                >\r\n                  <span className=\"ayah-text\">{ayah.text.ar}</span>\r\n                  <span className=\"ayah-number\">({ayah.number})</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            {/* Display Tafseer if available */}\r\n            {selectedAyahIndex !== null && tafseer && (\r\n              <div className=\"tafseer-container mt-4\">\r\n                <h5>تفسير الآية:</h5>\r\n                {loadingTafseer ? (\r\n                  <p>جاري تحميل التفسير...</p>\r\n                ) : (\r\n                  <p>{tafseer ? tafseer.text : \"لا يوجد تفسير متاح لهذه الآية.\"}</p>\r\n                )}\r\n              </div>\r\n            )}\r\n\r\n            {/* Pagination Controls */}\r\n            <div className=\"pagination-container\">\r\n              <button\r\n                className=\"btn btn-secondary\"\r\n                onClick={() => handlePageChange(currentPage - 1)}\r\n                disabled={currentPage === 1}\r\n              >\r\n                الصفحة السابقة\r\n              </button>\r\n              <span className=\"mx-2\">الصفحة {currentPage}</span>\r\n              <button\r\n                className=\"btn btn-secondary\"\r\n                onClick={() => handlePageChange(currentPage + 1)}\r\n                disabled={!ayatByPage[currentPage + 1]}\r\n              >\r\n                الصفحة التالية\r\n              </button>\r\n            </div>\r\n\r\n            {/* Navigation Buttons */}\r\n            <div className=\"mt-4\">\r\n              <button onClick={() => navigate(`/surahs/${currentSurahNumber - 1}`)} className=\"btn btn-primary me-3\">السورة السابقة</button>\r\n              <button onClick={() => navigate(`/surahs/${currentSurahNumber + 1}`)} className=\"btn btn-primary\">السورة التالية</button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <p>السورة غير موجودة.</p>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SurahViewer;\r\n","const normalizer = {\r\n    'ا': 'ا',\r\n    'أ': 'ا',\r\n    'إ': 'ا',\r\n    'آ': 'ا',\r\n    'ٱ': 'ا',\r\n    'ب': 'ب',\r\n    'ت': 'ت',\r\n    'ث': 'ث',\r\n    'ج': 'ج',\r\n    'ح': 'ح',\r\n    'خ': 'خ',\r\n    'د': 'د',\r\n    'ذ': 'ذ',\r\n    'ر': 'ر',\r\n    'ز': 'ز',\r\n    'س': 'س',\r\n    'ش': 'ش',\r\n    'ص': 'ص',\r\n    'ض': 'ض',\r\n    'ط': 'ط',\r\n    'ظ': 'ظ',\r\n    'ع': 'ع',\r\n    'غ': 'غ',\r\n    'ف': 'ف',\r\n    'ق': 'ق',\r\n    'ك': 'ك',\r\n    'ل': 'ل',\r\n    'م': 'م',\r\n    'ن': 'ن',\r\n    'ه': 'ه',\r\n    'ة': 'ة',\r\n    'و': 'و',\r\n    'ؤ': 'ؤ',\r\n    'ي': 'ي',\r\n    'ى': 'ي',\r\n    'ئ': 'ئ',\r\n    'ءِ': 'ء',\r\n    'ً': '',\r\n    'ٌ': '',\r\n    'ٍ': '',\r\n    'َ': '',\r\n    'ُ': '',\r\n    'ِ': '',\r\n    'ّ': '',\r\n    'ْ': '',\r\n    'ٓ': '',\r\n    'ٔ': '',\r\n    'ٕ': '',\r\n    ' ': ' '\r\n}\r\n\r\nfunction normalizeArabic(text) {\r\n    const normalizedText = Array.from(text).map(letter => normalizer[letter]).join(\"\")\r\n\r\n    return normalizedText\r\n}\r\n\r\nexport default normalizeArabic"],"names":["_ref","url","_useState","useState","_useState2","_slicedToArray","isLoaded","setIsLoaded","mp3Url","_jsx","className","children","_jsxs","onClick","disabled","FaHeadphones","controls","src","type","target","href","download","FaDownload","id","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","normalizeText","text","normalizeArabic","normalize","replace","char","surahNumber","useParams","selectedSurah","setSelectedSurah","_useState3","_useState4","searchTerm","setSearchTerm","_useState5","_useState6","filteredAyat","setFilteredAyat","_useState7","_useState8","selectedAyahIndex","setSelectedAyahIndex","_useState9","_useState10","tafseer","setTafseer","_useState11","_useState12","loadingTafseer","setLoadingTafseer","_useState13","_useState14","currentPage","setCurrentPage","_useState15","_useState16","ayatByPage","setAyatByPage","navigate","useNavigate","currentSurahNumber","parseInt","fetchTafseer","fn","_callee","surah","ayah","response","data","_context","fetch","concat","json","t0","console","self","args","arguments","apply","err","undefined","_x","_x2","groupAyatByPage","ayat","grouped","reduce","acc","currentAyah","page","handlePageChange","useEffect","_surah$verses","_surah$verses$","getSurahWithAyat","document","title","ar","verses","firstAyahPage","filtered","filter","includes","number","toString","_Fragment","FontResizer","getSurahDetails","getTypeInArabic","total_verses","AudioPlayer","getSurahAudioUrl","placeholder","onChange","map","index","selectedAyah","handleAyahClick","normalizer","Array","from","letter","join"],"sourceRoot":""}